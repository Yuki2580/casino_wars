"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/valibot";
exports.ids = ["vendor-chunks/valibot"];
exports.modules = {

/***/ "(rsc)/./node_modules/valibot/dist/index.js":
/*!********************************************!*\
  !*** ./node_modules/valibot/dist/index.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BIC_REGEX: () => (/* binding */ BIC_REGEX),\n/* harmony export */   BrandSymbol: () => (/* binding */ BrandSymbol),\n/* harmony export */   CUID2_REGEX: () => (/* binding */ CUID2_REGEX),\n/* harmony export */   DECIMAL_REGEX: () => (/* binding */ DECIMAL_REGEX),\n/* harmony export */   EMAIL_REGEX: () => (/* binding */ EMAIL_REGEX),\n/* harmony export */   EMOJI_REGEX: () => (/* binding */ EMOJI_REGEX),\n/* harmony export */   HEXADECIMAL_REGEX: () => (/* binding */ HEXADECIMAL_REGEX),\n/* harmony export */   HEX_COLOR_REGEX: () => (/* binding */ HEX_COLOR_REGEX),\n/* harmony export */   IMEI_REGEX: () => (/* binding */ IMEI_REGEX),\n/* harmony export */   IPV4_REGEX: () => (/* binding */ IPV4_REGEX),\n/* harmony export */   IPV6_REGEX: () => (/* binding */ IPV6_REGEX),\n/* harmony export */   ISO_DATE_REGEX: () => (/* binding */ ISO_DATE_REGEX),\n/* harmony export */   ISO_DATE_TIME_REGEX: () => (/* binding */ ISO_DATE_TIME_REGEX),\n/* harmony export */   ISO_TIMESTAMP_REGEX: () => (/* binding */ ISO_TIMESTAMP_REGEX),\n/* harmony export */   ISO_TIME_REGEX: () => (/* binding */ ISO_TIME_REGEX),\n/* harmony export */   ISO_TIME_SECOND_REGEX: () => (/* binding */ ISO_TIME_SECOND_REGEX),\n/* harmony export */   ISO_WEEK_REGEX: () => (/* binding */ ISO_WEEK_REGEX),\n/* harmony export */   MAC48_REGEX: () => (/* binding */ MAC48_REGEX),\n/* harmony export */   MAC64_REGEX: () => (/* binding */ MAC64_REGEX),\n/* harmony export */   OCTAL_REGEX: () => (/* binding */ OCTAL_REGEX),\n/* harmony export */   ULID_REGEX: () => (/* binding */ ULID_REGEX),\n/* harmony export */   UUID_REGEX: () => (/* binding */ UUID_REGEX),\n/* harmony export */   ValiError: () => (/* binding */ ValiError),\n/* harmony export */   actionIssue: () => (/* binding */ actionIssue),\n/* harmony export */   actionOutput: () => (/* binding */ actionOutput),\n/* harmony export */   any: () => (/* binding */ any),\n/* harmony export */   anyAsync: () => (/* binding */ anyAsync),\n/* harmony export */   array: () => (/* binding */ array),\n/* harmony export */   arrayAsync: () => (/* binding */ arrayAsync),\n/* harmony export */   bic: () => (/* binding */ bic),\n/* harmony export */   bigint: () => (/* binding */ bigint),\n/* harmony export */   bigintAsync: () => (/* binding */ bigintAsync),\n/* harmony export */   blob: () => (/* binding */ blob),\n/* harmony export */   blobAsync: () => (/* binding */ blobAsync),\n/* harmony export */   boolean: () => (/* binding */ boolean),\n/* harmony export */   booleanAsync: () => (/* binding */ booleanAsync),\n/* harmony export */   brand: () => (/* binding */ brand),\n/* harmony export */   bytes: () => (/* binding */ bytes),\n/* harmony export */   coerce: () => (/* binding */ coerce),\n/* harmony export */   coerceAsync: () => (/* binding */ coerceAsync),\n/* harmony export */   creditCard: () => (/* binding */ creditCard),\n/* harmony export */   cuid2: () => (/* binding */ cuid2),\n/* harmony export */   custom: () => (/* binding */ custom),\n/* harmony export */   customAsync: () => (/* binding */ customAsync),\n/* harmony export */   date: () => (/* binding */ date),\n/* harmony export */   dateAsync: () => (/* binding */ dateAsync),\n/* harmony export */   decimal: () => (/* binding */ decimal),\n/* harmony export */   defaultArgs: () => (/* binding */ defaultArgs),\n/* harmony export */   deleteGlobalConfig: () => (/* binding */ deleteGlobalConfig),\n/* harmony export */   deleteGlobalMessage: () => (/* binding */ deleteGlobalMessage),\n/* harmony export */   deleteSchemaMessage: () => (/* binding */ deleteSchemaMessage),\n/* harmony export */   deleteSpecificMessage: () => (/* binding */ deleteSpecificMessage),\n/* harmony export */   email: () => (/* binding */ email),\n/* harmony export */   emoji: () => (/* binding */ emoji),\n/* harmony export */   endsWith: () => (/* binding */ endsWith),\n/* harmony export */   enumAsync: () => (/* binding */ enumAsync),\n/* harmony export */   enum_: () => (/* binding */ enum_),\n/* harmony export */   every: () => (/* binding */ every),\n/* harmony export */   excludes: () => (/* binding */ excludes),\n/* harmony export */   fallback: () => (/* binding */ fallback),\n/* harmony export */   fallbackAsync: () => (/* binding */ fallbackAsync),\n/* harmony export */   finite: () => (/* binding */ finite),\n/* harmony export */   flatten: () => (/* binding */ flatten),\n/* harmony export */   forward: () => (/* binding */ forward),\n/* harmony export */   forwardAsync: () => (/* binding */ forwardAsync),\n/* harmony export */   getDefault: () => (/* binding */ getDefault),\n/* harmony export */   getDefaultAsync: () => (/* binding */ getDefaultAsync),\n/* harmony export */   getDefaults: () => (/* binding */ getDefaults),\n/* harmony export */   getDefaultsAsync: () => (/* binding */ getDefaultsAsync),\n/* harmony export */   getFallback: () => (/* binding */ getFallback),\n/* harmony export */   getFallbackAsync: () => (/* binding */ getFallbackAsync),\n/* harmony export */   getFallbacks: () => (/* binding */ getFallbacks),\n/* harmony export */   getFallbacksAsync: () => (/* binding */ getFallbacksAsync),\n/* harmony export */   getGlobalConfig: () => (/* binding */ getGlobalConfig),\n/* harmony export */   getGlobalMessage: () => (/* binding */ getGlobalMessage),\n/* harmony export */   getSchemaMessage: () => (/* binding */ getSchemaMessage),\n/* harmony export */   getSpecificMessage: () => (/* binding */ getSpecificMessage),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   hexColor: () => (/* binding */ hexColor),\n/* harmony export */   hexadecimal: () => (/* binding */ hexadecimal),\n/* harmony export */   i18n: () => (/* binding */ i18n),\n/* harmony export */   imei: () => (/* binding */ imei),\n/* harmony export */   includes: () => (/* binding */ includes),\n/* harmony export */   instance: () => (/* binding */ instance),\n/* harmony export */   instanceAsync: () => (/* binding */ instanceAsync),\n/* harmony export */   integer: () => (/* binding */ integer),\n/* harmony export */   intersect: () => (/* binding */ intersect),\n/* harmony export */   intersectAsync: () => (/* binding */ intersectAsync),\n/* harmony export */   ip: () => (/* binding */ ip),\n/* harmony export */   ipv4: () => (/* binding */ ipv4),\n/* harmony export */   ipv6: () => (/* binding */ ipv6),\n/* harmony export */   is: () => (/* binding */ is),\n/* harmony export */   isLuhnAlgo: () => (/* binding */ isLuhnAlgo),\n/* harmony export */   isOfType: () => (/* binding */ isOfType),\n/* harmony export */   isoDate: () => (/* binding */ isoDate),\n/* harmony export */   isoDateTime: () => (/* binding */ isoDateTime),\n/* harmony export */   isoTime: () => (/* binding */ isoTime),\n/* harmony export */   isoTimeSecond: () => (/* binding */ isoTimeSecond),\n/* harmony export */   isoTimestamp: () => (/* binding */ isoTimestamp),\n/* harmony export */   isoWeek: () => (/* binding */ isoWeek),\n/* harmony export */   keyof: () => (/* binding */ keyof),\n/* harmony export */   lazy: () => (/* binding */ lazy),\n/* harmony export */   lazyAsync: () => (/* binding */ lazyAsync),\n/* harmony export */   length: () => (/* binding */ length),\n/* harmony export */   literal: () => (/* binding */ literal),\n/* harmony export */   literalAsync: () => (/* binding */ literalAsync),\n/* harmony export */   mac: () => (/* binding */ mac),\n/* harmony export */   mac48: () => (/* binding */ mac48),\n/* harmony export */   mac64: () => (/* binding */ mac64),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   mapAsync: () => (/* binding */ mapAsync),\n/* harmony export */   maxBytes: () => (/* binding */ maxBytes),\n/* harmony export */   maxLength: () => (/* binding */ maxLength),\n/* harmony export */   maxSize: () => (/* binding */ maxSize),\n/* harmony export */   maxValue: () => (/* binding */ maxValue),\n/* harmony export */   merge: () => (/* binding */ merge),\n/* harmony export */   mergeAsync: () => (/* binding */ mergeAsync),\n/* harmony export */   mimeType: () => (/* binding */ mimeType),\n/* harmony export */   minBytes: () => (/* binding */ minBytes),\n/* harmony export */   minLength: () => (/* binding */ minLength),\n/* harmony export */   minSize: () => (/* binding */ minSize),\n/* harmony export */   minValue: () => (/* binding */ minValue),\n/* harmony export */   multipleOf: () => (/* binding */ multipleOf),\n/* harmony export */   nan: () => (/* binding */ nan),\n/* harmony export */   nanAsync: () => (/* binding */ nanAsync),\n/* harmony export */   never: () => (/* binding */ never),\n/* harmony export */   neverAsync: () => (/* binding */ neverAsync),\n/* harmony export */   nonNullable: () => (/* binding */ nonNullable),\n/* harmony export */   nonNullableAsync: () => (/* binding */ nonNullableAsync),\n/* harmony export */   nonNullish: () => (/* binding */ nonNullish),\n/* harmony export */   nonNullishAsync: () => (/* binding */ nonNullishAsync),\n/* harmony export */   nonOptional: () => (/* binding */ nonOptional),\n/* harmony export */   nonOptionalAsync: () => (/* binding */ nonOptionalAsync),\n/* harmony export */   notBytes: () => (/* binding */ notBytes),\n/* harmony export */   notLength: () => (/* binding */ notLength),\n/* harmony export */   notSize: () => (/* binding */ notSize),\n/* harmony export */   notValue: () => (/* binding */ notValue),\n/* harmony export */   nullAsync: () => (/* binding */ nullAsync),\n/* harmony export */   null_: () => (/* binding */ null_),\n/* harmony export */   nullable: () => (/* binding */ nullable),\n/* harmony export */   nullableAsync: () => (/* binding */ nullableAsync),\n/* harmony export */   nullish: () => (/* binding */ nullish),\n/* harmony export */   nullishAsync: () => (/* binding */ nullishAsync),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   numberAsync: () => (/* binding */ numberAsync),\n/* harmony export */   object: () => (/* binding */ object),\n/* harmony export */   objectAsync: () => (/* binding */ objectAsync),\n/* harmony export */   octal: () => (/* binding */ octal),\n/* harmony export */   omit: () => (/* binding */ omit),\n/* harmony export */   omitAsync: () => (/* binding */ omitAsync),\n/* harmony export */   optional: () => (/* binding */ optional),\n/* harmony export */   optionalAsync: () => (/* binding */ optionalAsync),\n/* harmony export */   parse: () => (/* binding */ parse),\n/* harmony export */   parseAsync: () => (/* binding */ parseAsync),\n/* harmony export */   partial: () => (/* binding */ partial),\n/* harmony export */   partialAsync: () => (/* binding */ partialAsync),\n/* harmony export */   pick: () => (/* binding */ pick),\n/* harmony export */   pickAsync: () => (/* binding */ pickAsync),\n/* harmony export */   picklist: () => (/* binding */ picklist),\n/* harmony export */   picklistAsync: () => (/* binding */ picklistAsync),\n/* harmony export */   pipeResult: () => (/* binding */ pipeResult),\n/* harmony export */   pipeResultAsync: () => (/* binding */ pipeResultAsync),\n/* harmony export */   record: () => (/* binding */ record),\n/* harmony export */   recordAsync: () => (/* binding */ recordAsync),\n/* harmony export */   regex: () => (/* binding */ regex),\n/* harmony export */   required: () => (/* binding */ required),\n/* harmony export */   requiredAsync: () => (/* binding */ requiredAsync),\n/* harmony export */   restAndDefaultArgs: () => (/* binding */ restAndDefaultArgs),\n/* harmony export */   safeInteger: () => (/* binding */ safeInteger),\n/* harmony export */   safeParse: () => (/* binding */ safeParse),\n/* harmony export */   safeParseAsync: () => (/* binding */ safeParseAsync),\n/* harmony export */   schemaIssue: () => (/* binding */ schemaIssue),\n/* harmony export */   schemaResult: () => (/* binding */ schemaResult),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   setAsync: () => (/* binding */ setAsync),\n/* harmony export */   setGlobalConfig: () => (/* binding */ setGlobalConfig),\n/* harmony export */   setGlobalMessage: () => (/* binding */ setGlobalMessage),\n/* harmony export */   setSchemaMessage: () => (/* binding */ setSchemaMessage),\n/* harmony export */   setSpecificMessage: () => (/* binding */ setSpecificMessage),\n/* harmony export */   size: () => (/* binding */ size),\n/* harmony export */   some: () => (/* binding */ some),\n/* harmony export */   special: () => (/* binding */ special),\n/* harmony export */   specialAsync: () => (/* binding */ specialAsync),\n/* harmony export */   startsWith: () => (/* binding */ startsWith),\n/* harmony export */   string: () => (/* binding */ string),\n/* harmony export */   stringAsync: () => (/* binding */ stringAsync),\n/* harmony export */   stringify: () => (/* binding */ stringify),\n/* harmony export */   symbol: () => (/* binding */ symbol),\n/* harmony export */   symbolAsync: () => (/* binding */ symbolAsync),\n/* harmony export */   toCustom: () => (/* binding */ toCustom),\n/* harmony export */   toCustomAsync: () => (/* binding */ toCustomAsync),\n/* harmony export */   toLowerCase: () => (/* binding */ toLowerCase),\n/* harmony export */   toMaxValue: () => (/* binding */ toMaxValue),\n/* harmony export */   toMinValue: () => (/* binding */ toMinValue),\n/* harmony export */   toTrimmed: () => (/* binding */ toTrimmed),\n/* harmony export */   toTrimmedEnd: () => (/* binding */ toTrimmedEnd),\n/* harmony export */   toTrimmedStart: () => (/* binding */ toTrimmedStart),\n/* harmony export */   toUpperCase: () => (/* binding */ toUpperCase),\n/* harmony export */   transform: () => (/* binding */ transform),\n/* harmony export */   transformAsync: () => (/* binding */ transformAsync),\n/* harmony export */   tuple: () => (/* binding */ tuple),\n/* harmony export */   tupleAsync: () => (/* binding */ tupleAsync),\n/* harmony export */   ulid: () => (/* binding */ ulid),\n/* harmony export */   undefinedAsync: () => (/* binding */ undefinedAsync),\n/* harmony export */   undefined_: () => (/* binding */ undefined_),\n/* harmony export */   union: () => (/* binding */ union),\n/* harmony export */   unionAsync: () => (/* binding */ unionAsync),\n/* harmony export */   unknown: () => (/* binding */ unknown),\n/* harmony export */   unknownAsync: () => (/* binding */ unknownAsync),\n/* harmony export */   unwrap: () => (/* binding */ unwrap),\n/* harmony export */   url: () => (/* binding */ url),\n/* harmony export */   uuid: () => (/* binding */ uuid),\n/* harmony export */   value: () => (/* binding */ value),\n/* harmony export */   variant: () => (/* binding */ variant),\n/* harmony export */   variantAsync: () => (/* binding */ variantAsync),\n/* harmony export */   voidAsync: () => (/* binding */ voidAsync),\n/* harmony export */   void_: () => (/* binding */ void_)\n/* harmony export */ });\n// src/error/flatten/flatten.ts\nfunction flatten(arg1) {\n    return (Array.isArray(arg1) ? arg1 : arg1.issues).reduce((flatErrors, issue)=>{\n        if (issue.path) {\n            if (issue.path.every(({ key })=>typeof key === \"string\" || typeof key === \"number\")) {\n                const path = issue.path.map(({ key })=>key).join(\".\");\n                if (flatErrors.nested[path]) {\n                    flatErrors.nested[path].push(issue.message);\n                } else {\n                    flatErrors.nested[path] = [\n                        issue.message\n                    ];\n                }\n            }\n        } else {\n            if (flatErrors.root) {\n                flatErrors.root.push(issue.message);\n            } else {\n                flatErrors.root = [\n                    issue.message\n                ];\n            }\n        }\n        return flatErrors;\n    }, {\n        nested: {}\n    });\n}\n// src/error/ValiError/ValiError.ts\nvar ValiError = class extends Error {\n    /**\n   * Creates a Valibot error with useful information.\n   *\n   * @param issues The error issues.\n   */ constructor(issues){\n        super(issues[0].message);\n        this.name = \"ValiError\";\n        this.issues = issues;\n    }\n};\n// src/methods/brand/brand.ts\nvar BrandSymbol = Symbol(\"brand\");\nfunction brand(schema, name) {\n    return schema;\n}\n// src/methods/coerce/coerce.ts\nfunction coerce(schema, action) {\n    return {\n        ...schema,\n        _parse (input, config) {\n            return schema._parse(action(input), config);\n        }\n    };\n}\n// src/methods/coerce/coerceAsync.ts\nfunction coerceAsync(schema, action) {\n    return {\n        ...schema,\n        async _parse (input, config) {\n            return schema._parse(await action(input), config);\n        }\n    };\n}\n// src/utils/actionIssue/actionIssue.ts\nfunction actionIssue(context, reference, input, label, received) {\n    return {\n        issues: [\n            {\n                context,\n                reference,\n                input,\n                label,\n                received\n            }\n        ]\n    };\n}\n// src/utils/actionOutput/actionOutput.ts\nfunction actionOutput(output) {\n    return {\n        output\n    };\n}\n// src/utils/defaultArgs/defaultArgs.ts\nfunction defaultArgs(arg1, arg2) {\n    return Array.isArray(arg1) ? [\n        void 0,\n        arg1\n    ] : [\n        arg1,\n        arg2\n    ];\n}\n// src/storages/globalConfig/globalConfig.ts\nvar store;\nfunction setGlobalConfig(config) {\n    store = {\n        ...store,\n        ...config\n    };\n}\nfunction getGlobalConfig(config) {\n    return {\n        lang: config?.lang ?? store?.lang,\n        message: config?.message,\n        abortEarly: config?.abortEarly ?? store?.abortEarly,\n        abortPipeEarly: config?.abortPipeEarly ?? store?.abortPipeEarly,\n        skipPipe: config?.skipPipe ?? store?.skipPipe\n    };\n}\nfunction deleteGlobalConfig() {\n    store = void 0;\n}\n// src/storages/globalMessage/globalMessage.ts\nvar store2;\nfunction setGlobalMessage(message, lang) {\n    if (!store2) store2 = /* @__PURE__ */ new Map();\n    store2.set(lang, message);\n}\nfunction getGlobalMessage(lang) {\n    return store2?.get(lang);\n}\nfunction deleteGlobalMessage(lang) {\n    store2?.delete(lang);\n}\n// src/storages/schemaMessage/schemaMessage.ts\nvar store3;\nfunction setSchemaMessage(message, lang) {\n    if (!store3) store3 = /* @__PURE__ */ new Map();\n    store3.set(lang, message);\n}\nfunction getSchemaMessage(lang) {\n    return store3?.get(lang);\n}\nfunction deleteSchemaMessage(lang) {\n    store3?.delete(lang);\n}\n// src/storages/specificMessage/specificMessage.ts\nvar store4;\nfunction setSpecificMessage(reference, message, lang) {\n    if (!store4) store4 = /* @__PURE__ */ new Map();\n    if (!store4.get(reference)) store4.set(reference, /* @__PURE__ */ new Map());\n    store4.get(reference).set(lang, message);\n}\nfunction getSpecificMessage(reference, lang) {\n    return store4?.get(reference)?.get(lang);\n}\nfunction deleteSpecificMessage(reference, lang) {\n    store4?.get(reference)?.delete(lang);\n}\n// src/utils/i18n/i18n.ts\nfunction i18n(schema, context, reference, config, issue) {\n    const message = context.message ?? getSpecificMessage(reference, issue.lang) ?? (schema ? getSchemaMessage(issue.lang) : null) ?? config?.message ?? getGlobalMessage(issue.lang) ?? issue.message;\n    return typeof message === \"function\" ? message(issue) : message;\n}\n// src/utils/isLuhnAlgo/isLuhnAlgo.ts\nvar NON_DIGIT_REGEX = /\\D/gu;\nfunction isLuhnAlgo(input) {\n    const number2 = input.replace(NON_DIGIT_REGEX, \"\");\n    let length2 = number2.length;\n    let bit = 1;\n    let sum = 0;\n    while(length2){\n        const value2 = +number2[--length2];\n        bit ^= 1;\n        sum += bit ? [\n            0,\n            2,\n            4,\n            6,\n            8,\n            1,\n            3,\n            5,\n            7,\n            9\n        ][value2] : value2;\n    }\n    return sum % 10 === 0;\n}\n// src/utils/isOfType/isOfType.ts\nfunction isOfType(type, object2) {\n    return object2.type === type;\n}\n// src/utils/schemaResult/schemaResult.ts\nfunction schemaResult(typed, output, issues) {\n    return {\n        typed,\n        output,\n        issues\n    };\n}\n// src/utils/stringify/stringify.ts\nfunction stringify(input) {\n    let type = typeof input;\n    if (type === \"object\") {\n        type = input ? Object.getPrototypeOf(input).constructor.name : \"null\";\n    }\n    return type === \"string\" ? `\"${input}\"` : type === \"number\" || type === \"bigint\" || type === \"boolean\" ? `${input}` : type;\n}\n// src/utils/pipeResult/utils/pipeIssue/pipeIssue.ts\nfunction pipeIssue(context, config, issue) {\n    const received = issue.received ?? stringify(issue.input);\n    const schemaIssue2 = {\n        reason: context.type,\n        context: issue.context.type,\n        expected: issue.context.expects,\n        received,\n        message: `Invalid ${issue.label}: ${issue.context.expects ? `Expected ${issue.context.expects} but r` : \"R\"}eceived ${received}`,\n        input: issue.input,\n        requirement: issue.context.requirement,\n        path: issue.path,\n        lang: config?.lang,\n        abortEarly: config?.abortEarly,\n        abortPipeEarly: config?.abortPipeEarly,\n        skipPipe: config?.skipPipe\n    };\n    schemaIssue2.message = i18n(false, issue.context, issue.reference, config, schemaIssue2);\n    return schemaIssue2;\n}\n// src/utils/pipeResult/pipeResult.ts\nfunction pipeResult(context, input, config, issues) {\n    if (context.pipe && !config?.skipPipe) {\n        for (const action of context.pipe){\n            const result = action._parse(input);\n            if (result.issues) {\n                for (const actionIssue2 of result.issues){\n                    const schemaIssue2 = pipeIssue(context, config, actionIssue2);\n                    issues ? issues.push(schemaIssue2) : issues = [\n                        schemaIssue2\n                    ];\n                }\n                if (config?.abortEarly || config?.abortPipeEarly) {\n                    break;\n                }\n            } else {\n                input = result.output;\n            }\n        }\n    }\n    return schemaResult(true, input, issues);\n}\n// src/utils/pipeResult/pipeResultAsync.ts\nasync function pipeResultAsync(context, input, config, issues) {\n    if (context.pipe && !config?.skipPipe) {\n        for (const action of context.pipe){\n            const result = await action._parse(input);\n            if (result.issues) {\n                for (const actionIssue2 of result.issues){\n                    const schemaIssue2 = pipeIssue(context, config, actionIssue2);\n                    issues ? issues.push(schemaIssue2) : issues = [\n                        schemaIssue2\n                    ];\n                }\n                if (config?.abortEarly || config?.abortPipeEarly) {\n                    break;\n                }\n            } else {\n                input = result.output;\n            }\n        }\n    }\n    return schemaResult(true, input, issues);\n}\n// src/utils/restAndDefaultArgs/restAndDefaultArgs.ts\nfunction restAndDefaultArgs(arg1, arg2, arg3) {\n    if (!arg1 || typeof arg1 === \"object\" && !Array.isArray(arg1)) {\n        const [error2, pipe2] = defaultArgs(arg2, arg3);\n        return [\n            arg1,\n            error2,\n            pipe2\n        ];\n    }\n    const [error, pipe] = defaultArgs(arg1, arg2);\n    return [\n        void 0,\n        error,\n        pipe\n    ];\n}\n// src/utils/schemaIssue/schemaIssue.ts\nfunction schemaIssue(context, reference, input, config, other) {\n    const received = stringify(input);\n    const expected = other?.expected ?? context.expects;\n    const issue = {\n        reason: other?.reason ?? \"type\",\n        context: context.type,\n        expected,\n        received,\n        message: `Invalid type: Expected ${expected} but received ${received}`,\n        input,\n        path: other?.path,\n        issues: other?.issues,\n        lang: config?.lang,\n        abortEarly: config?.abortEarly,\n        abortPipeEarly: config?.abortPipeEarly,\n        skipPipe: config?.skipPipe\n    };\n    issue.message = i18n(true, context, reference, config, issue);\n    return {\n        typed: false,\n        output: input,\n        issues: [\n            issue\n        ]\n    };\n}\n// src/methods/getFallback/getFallback.ts\nfunction getFallback(schema, info) {\n    return typeof schema.fallback === \"function\" ? schema.fallback(info) : schema.fallback;\n}\n// src/methods/getFallback/getFallbackAsync.ts\nasync function getFallbackAsync(schema, info) {\n    return typeof schema.fallback === \"function\" ? await schema.fallback(info) : schema.fallback;\n}\n// src/methods/fallback/fallback.ts\nfunction fallback(schema, fallback2) {\n    return {\n        ...schema,\n        fallback: fallback2,\n        _parse (input, config) {\n            const result = schema._parse(input, config);\n            return result.issues ? schemaResult(true, getFallback(this, {\n                input,\n                issues: result.issues\n            })) : result;\n        }\n    };\n}\n// src/methods/fallback/fallbackAsync.ts\nfunction fallbackAsync(schema, fallback2) {\n    return {\n        ...schema,\n        fallback: fallback2,\n        async _parse (input, config) {\n            const result = await schema._parse(input, config);\n            return result.issues ? schemaResult(true, await getFallbackAsync(this, {\n                input,\n                issues: result.issues\n            })) : result;\n        }\n    };\n}\n// src/methods/forward/forward.ts\nfunction forward(validation, pathList) {\n    return {\n        ...validation,\n        _parse (input) {\n            const result = validation._parse(input);\n            if (result.issues) {\n                for (const issue of result.issues){\n                    let pathInput = input;\n                    for (const key of pathList){\n                        const pathValue = pathInput[key];\n                        issue.input = pathValue;\n                        const pathItem = {\n                            type: \"unknown\",\n                            origin: \"value\",\n                            input: pathInput,\n                            key,\n                            value: pathValue\n                        };\n                        issue.path ? issue.path.push(pathItem) : issue.path = [\n                            pathItem\n                        ];\n                        if (!pathValue) {\n                            break;\n                        }\n                        pathInput = pathValue;\n                    }\n                }\n            }\n            return result;\n        }\n    };\n}\n// src/methods/forward/forwardAsync.ts\nfunction forwardAsync(validation, pathList) {\n    return {\n        ...validation,\n        async _parse (input) {\n            const result = await validation._parse(input);\n            if (result.issues) {\n                for (const issue of result.issues){\n                    let pathInput = input;\n                    for (const key of pathList){\n                        const pathValue = pathInput[key];\n                        issue.input = pathValue;\n                        const pathItem = {\n                            type: \"unknown\",\n                            origin: \"value\",\n                            input: pathInput,\n                            key,\n                            value: pathValue\n                        };\n                        issue.path ? issue.path.push(pathItem) : issue.path = [\n                            pathItem\n                        ];\n                        if (!pathValue) {\n                            break;\n                        }\n                        pathInput = pathValue;\n                    }\n                }\n            }\n            return result;\n        }\n    };\n}\n// src/methods/getDefault/getDefault.ts\nfunction getDefault(schema) {\n    return typeof schema.default === \"function\" ? schema.default() : schema.default;\n}\n// src/methods/getDefault/getDefaultAsync.ts\nasync function getDefaultAsync(schema) {\n    return typeof schema.default === \"function\" ? await schema.default() : schema.default;\n}\n// src/methods/getDefaults/getDefaults.ts\nfunction getDefaults(schema) {\n    if (schema.default !== void 0) {\n        return getDefault(schema);\n    }\n    if (isOfType(\"object\", schema)) {\n        return Object.fromEntries(Object.entries(schema.entries).map(([key, value2])=>[\n                key,\n                getDefaults(value2)\n            ]));\n    }\n    if (isOfType(\"tuple\", schema)) {\n        return schema.items.map(getDefaults);\n    }\n    return void 0;\n}\n// src/methods/getDefaults/getDefaultsAsync.ts\nasync function getDefaultsAsync(schema) {\n    if (schema.default !== void 0) {\n        return getDefaultAsync(schema);\n    }\n    if (isOfType(\"object\", schema)) {\n        return Object.fromEntries(await Promise.all(Object.entries(schema.entries).map(async ([key, value2])=>[\n                key,\n                await getDefaultsAsync(value2)\n            ])));\n    }\n    if (isOfType(\"tuple\", schema)) {\n        return Promise.all(schema.items.map(getDefaultsAsync));\n    }\n    return void 0;\n}\n// src/methods/getFallbacks/getFallbacks.ts\nfunction getFallbacks(schema) {\n    if (schema.fallback !== void 0) {\n        return getFallback(schema);\n    }\n    if (isOfType(\"object\", schema)) {\n        return Object.fromEntries(Object.entries(schema.entries).map(([key, value2])=>[\n                key,\n                getFallbacks(value2)\n            ]));\n    }\n    if (isOfType(\"tuple\", schema)) {\n        return schema.items.map(getFallbacks);\n    }\n    return void 0;\n}\n// src/methods/getFallbacks/getFallbacksAsync.ts\nasync function getFallbacksAsync(schema) {\n    if (schema.fallback !== void 0) {\n        return getFallbackAsync(schema);\n    }\n    if (isOfType(\"object\", schema)) {\n        return Object.fromEntries(await Promise.all(Object.entries(schema.entries).map(async ([key, value2])=>[\n                key,\n                await getFallbacksAsync(value2)\n            ])));\n    }\n    if (isOfType(\"tuple\", schema)) {\n        return Promise.all(schema.items.map(getFallbacksAsync));\n    }\n    return void 0;\n}\n// src/methods/is/is.ts\nfunction is(schema, input, config) {\n    return !schema._parse(input, {\n        abortEarly: true,\n        skipPipe: getGlobalConfig(config)?.skipPipe\n    }).issues;\n}\n// src/schemas/any/any.ts\nfunction any(pipe) {\n    return {\n        type: \"any\",\n        expects: \"any\",\n        async: false,\n        pipe,\n        _parse (input, config) {\n            return pipeResult(this, input, config);\n        }\n    };\n}\n// src/schemas/any/anyAsync.ts\nfunction anyAsync(pipe) {\n    return {\n        type: \"any\",\n        expects: \"any\",\n        async: true,\n        pipe,\n        async _parse (input, config) {\n            return pipeResultAsync(this, input, config);\n        }\n    };\n}\n// src/schemas/array/array.ts\nfunction array(item, arg2, arg3) {\n    const [message, pipe] = defaultArgs(arg2, arg3);\n    return {\n        type: \"array\",\n        expects: \"Array\",\n        async: false,\n        item,\n        message,\n        pipe,\n        _parse (input, config) {\n            if (Array.isArray(input)) {\n                let typed = true;\n                let issues;\n                const output = [];\n                for(let key = 0; key < input.length; key++){\n                    const value2 = input[key];\n                    const result = this.item._parse(value2, config);\n                    if (result.issues) {\n                        const pathItem = {\n                            type: \"array\",\n                            origin: \"value\",\n                            input,\n                            key,\n                            value: value2\n                        };\n                        for (const issue of result.issues){\n                            if (issue.path) {\n                                issue.path.unshift(pathItem);\n                            } else {\n                                issue.path = [\n                                    pathItem\n                                ];\n                            }\n                            issues?.push(issue);\n                        }\n                        if (!issues) {\n                            issues = result.issues;\n                        }\n                        if (config?.abortEarly) {\n                            typed = false;\n                            break;\n                        }\n                    }\n                    if (!result.typed) {\n                        typed = false;\n                    }\n                    output.push(result.output);\n                }\n                if (typed) {\n                    return pipeResult(this, output, config, issues);\n                }\n                return schemaResult(false, output, issues);\n            }\n            return schemaIssue(this, array, input, config);\n        }\n    };\n}\n// src/schemas/array/arrayAsync.ts\nfunction arrayAsync(item, arg2, arg3) {\n    const [message, pipe] = defaultArgs(arg2, arg3);\n    return {\n        type: \"array\",\n        expects: \"Array\",\n        async: true,\n        item,\n        message,\n        pipe,\n        async _parse (input, config) {\n            if (Array.isArray(input)) {\n                let typed = true;\n                let issues;\n                const output = [];\n                await Promise.all(input.map(async (value2, key)=>{\n                    if (!(config?.abortEarly && issues)) {\n                        const result = await this.item._parse(value2, config);\n                        if (!(config?.abortEarly && issues)) {\n                            if (result.issues) {\n                                const pathItem = {\n                                    type: \"array\",\n                                    origin: \"value\",\n                                    input,\n                                    key,\n                                    value: value2\n                                };\n                                for (const issue of result.issues){\n                                    if (issue.path) {\n                                        issue.path.unshift(pathItem);\n                                    } else {\n                                        issue.path = [\n                                            pathItem\n                                        ];\n                                    }\n                                    issues?.push(issue);\n                                }\n                                if (!issues) {\n                                    issues = result.issues;\n                                }\n                                if (config?.abortEarly) {\n                                    typed = false;\n                                    throw null;\n                                }\n                            }\n                            if (!result.typed) {\n                                typed = false;\n                            }\n                            output[key] = result.output;\n                        }\n                    }\n                })).catch(()=>null);\n                if (typed) {\n                    return pipeResultAsync(this, output, config, issues);\n                }\n                return schemaResult(false, output, issues);\n            }\n            return schemaIssue(this, arrayAsync, input, config);\n        }\n    };\n}\n// src/schemas/bigint/bigint.ts\nfunction bigint(arg1, arg2) {\n    const [message, pipe] = defaultArgs(arg1, arg2);\n    return {\n        type: \"bigint\",\n        expects: \"bigint\",\n        async: false,\n        message,\n        pipe,\n        _parse (input, config) {\n            if (typeof input === \"bigint\") {\n                return pipeResult(this, input, config);\n            }\n            return schemaIssue(this, bigint, input, config);\n        }\n    };\n}\n// src/schemas/bigint/bigintAsync.ts\nfunction bigintAsync(arg1, arg2) {\n    const [message, pipe] = defaultArgs(arg1, arg2);\n    return {\n        type: \"bigint\",\n        expects: \"bigint\",\n        async: true,\n        message,\n        pipe,\n        async _parse (input, config) {\n            if (typeof input === \"bigint\") {\n                return pipeResultAsync(this, input, config);\n            }\n            return schemaIssue(this, bigintAsync, input, config);\n        }\n    };\n}\n// src/schemas/blob/blob.ts\nfunction blob(arg1, arg2) {\n    const [message, pipe] = defaultArgs(arg1, arg2);\n    return {\n        type: \"blob\",\n        expects: \"Blob\",\n        async: false,\n        message,\n        pipe,\n        _parse (input, config) {\n            if (input instanceof Blob) {\n                return pipeResult(this, input, config);\n            }\n            return schemaIssue(this, blob, input, config);\n        }\n    };\n}\n// src/schemas/blob/blobAsync.ts\nfunction blobAsync(arg1, arg2) {\n    const [message, pipe] = defaultArgs(arg1, arg2);\n    return {\n        type: \"blob\",\n        expects: \"Blob\",\n        async: true,\n        message,\n        pipe,\n        async _parse (input, config) {\n            if (input instanceof Blob) {\n                return pipeResultAsync(this, input, config);\n            }\n            return schemaIssue(this, blobAsync, input, config);\n        }\n    };\n}\n// src/schemas/boolean/boolean.ts\nfunction boolean(arg1, arg2) {\n    const [message, pipe] = defaultArgs(arg1, arg2);\n    return {\n        type: \"boolean\",\n        expects: \"boolean\",\n        async: false,\n        message,\n        pipe,\n        _parse (input, config) {\n            if (typeof input === \"boolean\") {\n                return pipeResult(this, input, config);\n            }\n            return schemaIssue(this, boolean, input, config);\n        }\n    };\n}\n// src/schemas/boolean/booleanAsync.ts\nfunction booleanAsync(arg1, arg2) {\n    const [message, pipe] = defaultArgs(arg1, arg2);\n    return {\n        type: \"boolean\",\n        expects: \"boolean\",\n        async: true,\n        message,\n        pipe,\n        async _parse (input, config) {\n            if (typeof input === \"boolean\") {\n                return pipeResultAsync(this, input, config);\n            }\n            return schemaIssue(this, booleanAsync, input, config);\n        }\n    };\n}\n// src/schemas/date/date.ts\nfunction date(arg1, arg2) {\n    const [message, pipe] = defaultArgs(arg1, arg2);\n    return {\n        type: \"date\",\n        expects: \"Date\",\n        async: false,\n        message,\n        pipe,\n        _parse (input, config) {\n            if (input instanceof Date && !isNaN(input.getTime())) {\n                return pipeResult(this, input, config);\n            }\n            return schemaIssue(this, date, input, config);\n        }\n    };\n}\n// src/schemas/date/dateAsync.ts\nfunction dateAsync(arg1, arg2) {\n    const [message, pipe] = defaultArgs(arg1, arg2);\n    return {\n        type: \"date\",\n        expects: \"Date\",\n        async: true,\n        message,\n        pipe,\n        async _parse (input, config) {\n            if (input instanceof Date && !isNaN(input.getTime())) {\n                return pipeResultAsync(this, input, config);\n            }\n            return schemaIssue(this, dateAsync, input, config);\n        }\n    };\n}\n// src/schemas/enum/enum.ts\nfunction enum_(enum__, message) {\n    const values = Object.values(enum__);\n    return {\n        type: \"enum\",\n        expects: values.map(stringify).join(\" | \"),\n        async: false,\n        enum: enum__,\n        message,\n        _parse (input, config) {\n            if (values.includes(input)) {\n                return schemaResult(true, input);\n            }\n            return schemaIssue(this, enum_, input, config);\n        }\n    };\n}\n// src/schemas/enum/enumAsync.ts\nfunction enumAsync(enum_2, message) {\n    const values = Object.values(enum_2);\n    return {\n        type: \"enum\",\n        expects: values.map(stringify).join(\" | \"),\n        async: true,\n        enum: enum_2,\n        message,\n        async _parse (input, config) {\n            if (values.includes(input)) {\n                return schemaResult(true, input);\n            }\n            return schemaIssue(this, enumAsync, input, config);\n        }\n    };\n}\n// src/schemas/instance/instance.ts\nfunction instance(class_, arg2, arg3) {\n    const [message, pipe] = defaultArgs(arg2, arg3);\n    return {\n        type: \"instance\",\n        expects: class_.name,\n        async: false,\n        class: class_,\n        message,\n        pipe,\n        _parse (input, config) {\n            if (input instanceof this.class) {\n                return pipeResult(this, input, config);\n            }\n            return schemaIssue(this, instance, input, config);\n        }\n    };\n}\n// src/schemas/instance/instanceAsync.ts\nfunction instanceAsync(class_, arg2, arg3) {\n    const [message, pipe] = defaultArgs(arg2, arg3);\n    return {\n        type: \"instance\",\n        expects: class_.name,\n        async: true,\n        class: class_,\n        message,\n        pipe,\n        async _parse (input, config) {\n            if (input instanceof this.class) {\n                return pipeResultAsync(this, input, config);\n            }\n            return schemaIssue(this, instanceAsync, input, config);\n        }\n    };\n}\n// src/schemas/intersect/utils/mergeOutputs/mergeOutputs.ts\nfunction mergeOutputs(output1, output2) {\n    if (typeof output1 === typeof output2) {\n        if (output1 === output2 || output1 instanceof Date && output2 instanceof Date && +output1 === +output2) {\n            return {\n                output: output1\n            };\n        }\n        if (Array.isArray(output1) && Array.isArray(output2)) {\n            if (output1.length === output2.length) {\n                const array2 = [];\n                for(let index = 0; index < output1.length; index++){\n                    const result = mergeOutputs(output1[index], output2[index]);\n                    if (result.invalid) {\n                        return result;\n                    }\n                    array2.push(result.output);\n                }\n                return {\n                    output: array2\n                };\n            }\n            return {\n                invalid: true\n            };\n        }\n        if (output1 && output2 && output1.constructor === Object && output2.constructor === Object) {\n            const object2 = {\n                ...output1,\n                ...output2\n            };\n            for(const key in output1){\n                if (key in output2) {\n                    const result = mergeOutputs(output1[key], output2[key]);\n                    if (result.invalid) {\n                        return result;\n                    }\n                    object2[key] = result.output;\n                }\n            }\n            return {\n                output: object2\n            };\n        }\n    }\n    return {\n        invalid: true\n    };\n}\n// src/schemas/intersect/intersect.ts\nfunction intersect(options, arg2, arg3) {\n    const [message, pipe] = defaultArgs(arg2, arg3);\n    return {\n        type: \"intersect\",\n        expects: [\n            ...new Set(options.map((option)=>option.expects))\n        ].join(\" & \"),\n        async: false,\n        options,\n        message,\n        pipe,\n        _parse (input, config) {\n            let typed = true;\n            let issues;\n            let output;\n            const outputs = [];\n            for (const schema of this.options){\n                const result = schema._parse(input, config);\n                if (result.issues) {\n                    if (issues) {\n                        for (const issue of result.issues){\n                            issues.push(issue);\n                        }\n                    } else {\n                        issues = result.issues;\n                    }\n                    if (config?.abortEarly) {\n                        typed = false;\n                        break;\n                    }\n                }\n                if (!result.typed) {\n                    typed = false;\n                }\n                outputs.push(result.output);\n            }\n            if (typed) {\n                output = outputs[0];\n                for(let index = 1; index < outputs.length; index++){\n                    const result = mergeOutputs(output, outputs[index]);\n                    if (result.invalid) {\n                        return schemaIssue(this, intersect, input, config);\n                    }\n                    output = result.output;\n                }\n                return pipeResult(this, output, config, issues);\n            }\n            return schemaResult(false, output, issues);\n        }\n    };\n}\n// src/schemas/intersect/intersectAsync.ts\nfunction intersectAsync(options, arg2, arg3) {\n    const [message, pipe] = defaultArgs(arg2, arg3);\n    return {\n        type: \"intersect\",\n        expects: [\n            ...new Set(options.map((option)=>option.expects))\n        ].join(\" & \"),\n        async: true,\n        options,\n        message,\n        pipe,\n        async _parse (input, config) {\n            let typed = true;\n            let issues;\n            let output;\n            const outputs = [];\n            await Promise.all(this.options.map(async (schema)=>{\n                if (!(config?.abortEarly && issues)) {\n                    const result = await schema._parse(input, config);\n                    if (!(config?.abortEarly && issues)) {\n                        if (result.issues) {\n                            if (issues) {\n                                for (const issue of result.issues){\n                                    issues.push(issue);\n                                }\n                            } else {\n                                issues = result.issues;\n                            }\n                            if (config?.abortEarly) {\n                                typed = false;\n                                throw null;\n                            }\n                        }\n                        if (!result.typed) {\n                            typed = false;\n                        }\n                        outputs.push(result.output);\n                    }\n                }\n            })).catch(()=>null);\n            if (typed) {\n                output = outputs[0];\n                for(let index = 1; index < outputs.length; index++){\n                    const result = mergeOutputs(output, outputs[index]);\n                    if (result.invalid) {\n                        return schemaIssue(this, intersectAsync, input, config);\n                    }\n                    output = result.output;\n                }\n                return pipeResultAsync(this, output, config, issues);\n            }\n            return schemaResult(false, output, issues);\n        }\n    };\n}\n// src/schemas/lazy/lazy.ts\nfunction lazy(getter) {\n    return {\n        type: \"lazy\",\n        expects: \"unknown\",\n        async: false,\n        getter,\n        _parse (input, config) {\n            return this.getter(input)._parse(input, config);\n        }\n    };\n}\n// src/schemas/lazy/lazyAsync.ts\nfunction lazyAsync(getter) {\n    return {\n        type: \"lazy\",\n        expects: \"unknown\",\n        async: true,\n        getter,\n        async _parse (input, config) {\n            return (await this.getter(input))._parse(input, config);\n        }\n    };\n}\n// src/schemas/literal/literal.ts\nfunction literal(literal_, message) {\n    return {\n        type: \"literal\",\n        expects: stringify(literal_),\n        async: false,\n        literal: literal_,\n        message,\n        _parse (input, config) {\n            if (input === this.literal) {\n                return schemaResult(true, input);\n            }\n            return schemaIssue(this, literal, input, config);\n        }\n    };\n}\n// src/schemas/literal/literalAsync.ts\nfunction literalAsync(literal2, message) {\n    return {\n        type: \"literal\",\n        expects: stringify(literal2),\n        async: true,\n        literal: literal2,\n        message,\n        async _parse (input, config) {\n            if (input === this.literal) {\n                return schemaResult(true, input);\n            }\n            return schemaIssue(this, literalAsync, input, config);\n        }\n    };\n}\n// src/schemas/map/map.ts\nfunction map(key, value2, arg3, arg4) {\n    const [message, pipe] = defaultArgs(arg3, arg4);\n    return {\n        type: \"map\",\n        expects: \"Map\",\n        async: false,\n        key,\n        value: value2,\n        message,\n        pipe,\n        _parse (input, config) {\n            if (input instanceof Map) {\n                let typed = true;\n                let issues;\n                const output = /* @__PURE__ */ new Map();\n                for (const [inputKey, inputValue] of input.entries()){\n                    let pathItem;\n                    const keyResult = this.key._parse(inputKey, config);\n                    if (keyResult.issues) {\n                        pathItem = {\n                            type: \"map\",\n                            origin: \"key\",\n                            input,\n                            key: inputKey,\n                            value: inputValue\n                        };\n                        for (const issue of keyResult.issues){\n                            if (issue.path) {\n                                issue.path.unshift(pathItem);\n                            } else {\n                                issue.path = [\n                                    pathItem\n                                ];\n                            }\n                            issues?.push(issue);\n                        }\n                        if (!issues) {\n                            issues = keyResult.issues;\n                        }\n                        if (config?.abortEarly) {\n                            typed = false;\n                            break;\n                        }\n                    }\n                    const valueResult = this.value._parse(inputValue, config);\n                    if (valueResult.issues) {\n                        pathItem = pathItem ?? {\n                            type: \"map\",\n                            origin: \"value\",\n                            input,\n                            key: inputKey,\n                            value: inputValue\n                        };\n                        for (const issue of valueResult.issues){\n                            if (issue.path) {\n                                issue.path.unshift(pathItem);\n                            } else {\n                                issue.path = [\n                                    pathItem\n                                ];\n                            }\n                            issues?.push(issue);\n                        }\n                        if (!issues) {\n                            issues = valueResult.issues;\n                        }\n                        if (config?.abortEarly) {\n                            typed = false;\n                            break;\n                        }\n                    }\n                    if (!keyResult.typed || !valueResult.typed) {\n                        typed = false;\n                    }\n                    output.set(keyResult.output, valueResult.output);\n                }\n                if (typed) {\n                    return pipeResult(this, output, config, issues);\n                }\n                return schemaResult(false, output, issues);\n            }\n            return schemaIssue(this, map, input, config);\n        }\n    };\n}\n// src/schemas/map/mapAsync.ts\nfunction mapAsync(key, value2, arg3, arg4) {\n    const [message, pipe] = defaultArgs(arg3, arg4);\n    return {\n        type: \"map\",\n        expects: \"Map\",\n        async: true,\n        key,\n        value: value2,\n        message,\n        pipe,\n        async _parse (input, config) {\n            if (input instanceof Map) {\n                let typed = true;\n                let issues;\n                const output = /* @__PURE__ */ new Map();\n                await Promise.all(Array.from(input.entries()).map(async ([inputKey, inputValue])=>{\n                    let pathItem;\n                    const [keyResult, valueResult] = await Promise.all([\n                        {\n                            schema: this.key,\n                            value: inputKey,\n                            origin: \"key\"\n                        },\n                        {\n                            schema: this.value,\n                            value: inputValue,\n                            origin: \"value\"\n                        }\n                    ].map(async ({ schema, value: value3, origin })=>{\n                        if (!(config?.abortEarly && issues)) {\n                            const result = await schema._parse(value3, config);\n                            if (!(config?.abortEarly && issues)) {\n                                if (result.issues) {\n                                    pathItem = pathItem ?? {\n                                        type: \"map\",\n                                        origin,\n                                        input,\n                                        key: inputKey,\n                                        value: inputValue\n                                    };\n                                    for (const issue of result.issues){\n                                        if (issue.path) {\n                                            issue.path.unshift(pathItem);\n                                        } else {\n                                            issue.path = [\n                                                pathItem\n                                            ];\n                                        }\n                                        issues?.push(issue);\n                                    }\n                                    if (!issues) {\n                                        issues = result.issues;\n                                    }\n                                    if (config?.abortEarly) {\n                                        throw null;\n                                    }\n                                }\n                                return result;\n                            }\n                        }\n                    })).catch(()=>[]);\n                    if (!keyResult?.typed || !valueResult?.typed) {\n                        typed = false;\n                    }\n                    if (keyResult && valueResult) {\n                        output.set(keyResult.output, valueResult.output);\n                    }\n                }));\n                if (typed) {\n                    return pipeResultAsync(this, output, config, issues);\n                }\n                return schemaResult(false, output, issues);\n            }\n            return schemaIssue(this, mapAsync, input, config);\n        }\n    };\n}\n// src/schemas/nan/nan.ts\nfunction nan(message) {\n    return {\n        type: \"nan\",\n        expects: \"NaN\",\n        async: false,\n        message,\n        _parse (input, config) {\n            if (Number.isNaN(input)) {\n                return schemaResult(true, input);\n            }\n            return schemaIssue(this, nan, input, config);\n        }\n    };\n}\n// src/schemas/nan/nanAsync.ts\nfunction nanAsync(message) {\n    return {\n        type: \"nan\",\n        expects: \"NaN\",\n        async: true,\n        message,\n        async _parse (input, config) {\n            if (Number.isNaN(input)) {\n                return schemaResult(true, input);\n            }\n            return schemaIssue(this, nanAsync, input, config);\n        }\n    };\n}\n// src/schemas/never/never.ts\nfunction never(message) {\n    return {\n        type: \"never\",\n        expects: \"never\",\n        async: false,\n        message,\n        _parse (input, config) {\n            return schemaIssue(this, never, input, config);\n        }\n    };\n}\n// src/schemas/never/neverAsync.ts\nfunction neverAsync(message) {\n    return {\n        type: \"never\",\n        expects: \"never\",\n        async: true,\n        message,\n        async _parse (input, config) {\n            return schemaIssue(this, neverAsync, input, config);\n        }\n    };\n}\n// src/schemas/nonNullable/nonNullable.ts\nfunction nonNullable(wrapped, message) {\n    return {\n        type: \"non_nullable\",\n        expects: \"!null\",\n        async: false,\n        wrapped,\n        message,\n        _parse (input, config) {\n            if (input === null) {\n                return schemaIssue(this, nonNullable, input, config);\n            }\n            return this.wrapped._parse(input, config);\n        }\n    };\n}\n// src/schemas/nonNullable/nonNullableAsync.ts\nfunction nonNullableAsync(wrapped, message) {\n    return {\n        type: \"non_nullable\",\n        expects: \"!null\",\n        async: true,\n        wrapped,\n        message,\n        async _parse (input, config) {\n            if (input === null) {\n                return schemaIssue(this, nonNullableAsync, input, config);\n            }\n            return this.wrapped._parse(input, config);\n        }\n    };\n}\n// src/schemas/nonNullish/nonNullish.ts\nfunction nonNullish(wrapped, message) {\n    return {\n        type: \"non_nullish\",\n        expects: \"!null & !undefined\",\n        async: false,\n        wrapped,\n        message,\n        _parse (input, config) {\n            if (input === null || input === void 0) {\n                return schemaIssue(this, nonNullish, input, config);\n            }\n            return this.wrapped._parse(input, config);\n        }\n    };\n}\n// src/schemas/nonNullish/nonNullishAsync.ts\nfunction nonNullishAsync(wrapped, message) {\n    return {\n        type: \"non_nullish\",\n        expects: \"!null & !undefined\",\n        async: true,\n        wrapped,\n        message,\n        async _parse (input, config) {\n            if (input === null || input === void 0) {\n                return schemaIssue(this, nonNullishAsync, input, config);\n            }\n            return this.wrapped._parse(input, config);\n        }\n    };\n}\n// src/schemas/nonOptional/nonOptional.ts\nfunction nonOptional(wrapped, message) {\n    return {\n        type: \"non_optional\",\n        expects: \"!undefined\",\n        async: false,\n        wrapped,\n        message,\n        _parse (input, config) {\n            if (input === void 0) {\n                return schemaIssue(this, nonOptional, input, config);\n            }\n            return this.wrapped._parse(input, config);\n        }\n    };\n}\n// src/schemas/nonOptional/nonOptionalAsync.ts\nfunction nonOptionalAsync(wrapped, message) {\n    return {\n        type: \"non_optional\",\n        expects: \"!undefined\",\n        async: true,\n        wrapped,\n        message,\n        async _parse (input, config) {\n            if (input === void 0) {\n                return schemaIssue(this, nonOptionalAsync, input, config);\n            }\n            return this.wrapped._parse(input, config);\n        }\n    };\n}\n// src/schemas/nullable/nullable.ts\nfunction nullable(wrapped, default_) {\n    return {\n        type: \"nullable\",\n        expects: `${wrapped.expects} | null`,\n        async: false,\n        wrapped,\n        default: default_,\n        _parse (input, config) {\n            if (input === null) {\n                const override = getDefault(this);\n                if (override === void 0) {\n                    return schemaResult(true, input);\n                }\n                input = override;\n            }\n            return this.wrapped._parse(input, config);\n        }\n    };\n}\n// src/schemas/nullable/nullableAsync.ts\nfunction nullableAsync(wrapped, default_) {\n    return {\n        type: \"nullable\",\n        expects: `${wrapped.expects} | null`,\n        async: true,\n        wrapped,\n        default: default_,\n        async _parse (input, config) {\n            if (input === null) {\n                const override = await getDefaultAsync(this);\n                if (override === void 0) {\n                    return schemaResult(true, input);\n                }\n                input = override;\n            }\n            return this.wrapped._parse(input, config);\n        }\n    };\n}\n// src/schemas/nullish/nullish.ts\nfunction nullish(wrapped, default_) {\n    return {\n        type: \"nullish\",\n        expects: `${wrapped.expects} | null | undefined`,\n        async: false,\n        wrapped,\n        default: default_,\n        _parse (input, config) {\n            if (input === null || input === void 0) {\n                const override = getDefault(this);\n                if (override === void 0) {\n                    return schemaResult(true, input);\n                }\n                input = override;\n            }\n            return this.wrapped._parse(input, config);\n        }\n    };\n}\n// src/schemas/nullish/nullishAsync.ts\nfunction nullishAsync(wrapped, default_) {\n    return {\n        type: \"nullish\",\n        expects: `${wrapped.expects} | null | undefined`,\n        async: true,\n        wrapped,\n        default: default_,\n        async _parse (input, config) {\n            if (input === null || input === void 0) {\n                const override = await getDefaultAsync(this);\n                if (override === void 0) {\n                    return schemaResult(true, input);\n                }\n                input = override;\n            }\n            return this.wrapped._parse(input, config);\n        }\n    };\n}\n// src/schemas/null/null.ts\nfunction null_(message) {\n    return {\n        type: \"null\",\n        expects: \"null\",\n        async: false,\n        message,\n        _parse (input, config) {\n            if (input === null) {\n                return schemaResult(true, input);\n            }\n            return schemaIssue(this, null_, input, config);\n        }\n    };\n}\n// src/schemas/null/nullAsync.ts\nfunction nullAsync(message) {\n    return {\n        type: \"null\",\n        expects: \"null\",\n        async: true,\n        message,\n        async _parse (input, config) {\n            if (input === null) {\n                return schemaResult(true, input);\n            }\n            return schemaIssue(this, nullAsync, input, config);\n        }\n    };\n}\n// src/schemas/number/number.ts\nfunction number(arg1, arg2) {\n    const [message, pipe] = defaultArgs(arg1, arg2);\n    return {\n        type: \"number\",\n        expects: \"number\",\n        async: false,\n        message,\n        pipe,\n        _parse (input, config) {\n            if (typeof input === \"number\" && !isNaN(input)) {\n                return pipeResult(this, input, config);\n            }\n            return schemaIssue(this, number, input, config);\n        }\n    };\n}\n// src/schemas/number/numberAsync.ts\nfunction numberAsync(arg1, arg2) {\n    const [message, pipe] = defaultArgs(arg1, arg2);\n    return {\n        type: \"number\",\n        expects: \"number\",\n        async: true,\n        message,\n        pipe,\n        async _parse (input, config) {\n            if (typeof input === \"number\" && !isNaN(input)) {\n                return pipeResultAsync(this, input, config);\n            }\n            return schemaIssue(this, numberAsync, input, config);\n        }\n    };\n}\n// src/schemas/object/object.ts\nfunction object(entries, arg2, arg3, arg4) {\n    const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n    let cachedEntries;\n    return {\n        type: \"object\",\n        expects: \"Object\",\n        async: false,\n        entries,\n        rest,\n        message,\n        pipe,\n        _parse (input, config) {\n            if (input && typeof input === \"object\") {\n                cachedEntries = cachedEntries ?? Object.entries(this.entries);\n                let typed = true;\n                let issues;\n                const output = {};\n                for (const [key, schema] of cachedEntries){\n                    const value2 = input[key];\n                    const result = schema._parse(value2, config);\n                    if (result.issues) {\n                        const pathItem = {\n                            type: \"object\",\n                            origin: \"value\",\n                            input,\n                            key,\n                            value: value2\n                        };\n                        for (const issue of result.issues){\n                            if (issue.path) {\n                                issue.path.unshift(pathItem);\n                            } else {\n                                issue.path = [\n                                    pathItem\n                                ];\n                            }\n                            issues?.push(issue);\n                        }\n                        if (!issues) {\n                            issues = result.issues;\n                        }\n                        if (config?.abortEarly) {\n                            typed = false;\n                            break;\n                        }\n                    }\n                    if (!result.typed) {\n                        typed = false;\n                    }\n                    if (result.output !== void 0 || key in input) {\n                        output[key] = result.output;\n                    }\n                }\n                if (this.rest && !(config?.abortEarly && issues)) {\n                    for(const key in input){\n                        if (!(key in this.entries)) {\n                            const value2 = input[key];\n                            const result = this.rest._parse(value2, config);\n                            if (result.issues) {\n                                const pathItem = {\n                                    type: \"object\",\n                                    origin: \"value\",\n                                    input,\n                                    key,\n                                    value: value2\n                                };\n                                for (const issue of result.issues){\n                                    if (issue.path) {\n                                        issue.path.unshift(pathItem);\n                                    } else {\n                                        issue.path = [\n                                            pathItem\n                                        ];\n                                    }\n                                    issues?.push(issue);\n                                }\n                                if (!issues) {\n                                    issues = result.issues;\n                                }\n                                if (config?.abortEarly) {\n                                    typed = false;\n                                    break;\n                                }\n                            }\n                            if (!result.typed) {\n                                typed = false;\n                            }\n                            output[key] = result.output;\n                        }\n                    }\n                }\n                if (typed) {\n                    return pipeResult(this, output, config, issues);\n                }\n                return schemaResult(false, output, issues);\n            }\n            return schemaIssue(this, object, input, config);\n        }\n    };\n}\n// src/schemas/object/objectAsync.ts\nfunction objectAsync(entries, arg2, arg3, arg4) {\n    const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n    let cachedEntries;\n    return {\n        type: \"object\",\n        expects: \"Object\",\n        async: true,\n        entries,\n        rest,\n        message,\n        pipe,\n        async _parse (input, config) {\n            if (input && typeof input === \"object\") {\n                cachedEntries = cachedEntries ?? Object.entries(this.entries);\n                let typed = true;\n                let issues;\n                const output = {};\n                await Promise.all([\n                    Promise.all(cachedEntries.map(async ([key, schema])=>{\n                        if (!(config?.abortEarly && issues)) {\n                            const value2 = input[key];\n                            const result = await schema._parse(value2, config);\n                            if (!(config?.abortEarly && issues)) {\n                                if (result.issues) {\n                                    const pathItem = {\n                                        type: \"object\",\n                                        origin: \"value\",\n                                        input,\n                                        key,\n                                        value: value2\n                                    };\n                                    for (const issue of result.issues){\n                                        if (issue.path) {\n                                            issue.path.unshift(pathItem);\n                                        } else {\n                                            issue.path = [\n                                                pathItem\n                                            ];\n                                        }\n                                        issues?.push(issue);\n                                    }\n                                    if (!issues) {\n                                        issues = result.issues;\n                                    }\n                                    if (config?.abortEarly) {\n                                        typed = false;\n                                        throw null;\n                                    }\n                                }\n                                if (!result.typed) {\n                                    typed = false;\n                                }\n                                if (result.output !== void 0 || key in input) {\n                                    output[key] = result.output;\n                                }\n                            }\n                        }\n                    })),\n                    this.rest && Promise.all(Object.entries(input).map(async ([key, value2])=>{\n                        if (!(config?.abortEarly && issues)) {\n                            if (!(key in this.entries)) {\n                                const result = await this.rest._parse(value2, config);\n                                if (!(config?.abortEarly && issues)) {\n                                    if (result.issues) {\n                                        const pathItem = {\n                                            type: \"object\",\n                                            origin: \"value\",\n                                            input,\n                                            key,\n                                            value: value2\n                                        };\n                                        for (const issue of result.issues){\n                                            if (issue.path) {\n                                                issue.path.unshift(pathItem);\n                                            } else {\n                                                issue.path = [\n                                                    pathItem\n                                                ];\n                                            }\n                                            issues?.push(issue);\n                                        }\n                                        if (!issues) {\n                                            issues = result.issues;\n                                        }\n                                        if (config?.abortEarly) {\n                                            typed = false;\n                                            throw null;\n                                        }\n                                    }\n                                    if (!result.typed) {\n                                        typed = false;\n                                    }\n                                    output[key] = result.output;\n                                }\n                            }\n                        }\n                    }))\n                ]).catch(()=>null);\n                if (typed) {\n                    return pipeResultAsync(this, output, config, issues);\n                }\n                return schemaResult(false, output, issues);\n            }\n            return schemaIssue(this, objectAsync, input, config);\n        }\n    };\n}\n// src/schemas/optional/optional.ts\nfunction optional(wrapped, default_) {\n    return {\n        type: \"optional\",\n        expects: `${wrapped.expects} | undefined`,\n        async: false,\n        wrapped,\n        default: default_,\n        _parse (input, config) {\n            if (input === void 0) {\n                const override = getDefault(this);\n                if (override === void 0) {\n                    return schemaResult(true, input);\n                }\n                input = override;\n            }\n            return this.wrapped._parse(input, config);\n        }\n    };\n}\n// src/schemas/optional/optionalAsync.ts\nfunction optionalAsync(wrapped, default_) {\n    return {\n        type: \"optional\",\n        expects: `${wrapped.expects} | undefined`,\n        async: true,\n        wrapped,\n        default: default_,\n        async _parse (input, config) {\n            if (input === void 0) {\n                const override = await getDefaultAsync(this);\n                if (override === void 0) {\n                    return schemaResult(true, input);\n                }\n                input = override;\n            }\n            return this.wrapped._parse(input, config);\n        }\n    };\n}\n// src/schemas/picklist/picklist.ts\nfunction picklist(options, message) {\n    return {\n        type: \"picklist\",\n        expects: options.map(stringify).join(\" | \"),\n        async: false,\n        options,\n        message,\n        _parse (input, config) {\n            if (this.options.includes(input)) {\n                return schemaResult(true, input);\n            }\n            return schemaIssue(this, picklist, input, config);\n        }\n    };\n}\n// src/schemas/picklist/picklistAsync.ts\nfunction picklistAsync(options, message) {\n    return {\n        type: \"picklist\",\n        expects: options.map(stringify).join(\" | \"),\n        async: true,\n        options,\n        message,\n        async _parse (input, config) {\n            if (this.options.includes(input)) {\n                return schemaResult(true, input);\n            }\n            return schemaIssue(this, picklistAsync, input, config);\n        }\n    };\n}\n// src/schemas/string/string.ts\nfunction string(arg1, arg2) {\n    const [message, pipe] = defaultArgs(arg1, arg2);\n    return {\n        type: \"string\",\n        expects: \"string\",\n        async: false,\n        message,\n        pipe,\n        _parse (input, config) {\n            if (typeof input === \"string\") {\n                return pipeResult(this, input, config);\n            }\n            return schemaIssue(this, string, input, config);\n        }\n    };\n}\n// src/schemas/string/stringAsync.ts\nfunction stringAsync(arg1, arg2) {\n    const [message, pipe] = defaultArgs(arg1, arg2);\n    return {\n        type: \"string\",\n        expects: \"string\",\n        async: true,\n        message,\n        pipe,\n        async _parse (input, config) {\n            if (typeof input === \"string\") {\n                return pipeResultAsync(this, input, config);\n            }\n            return schemaIssue(this, stringAsync, input, config);\n        }\n    };\n}\n// src/schemas/record/utils/recordArgs/recordArgs.ts\nfunction recordArgs(arg1, arg2, arg3, arg4) {\n    if (typeof arg2 === \"object\" && !Array.isArray(arg2)) {\n        const [message2, pipe2] = defaultArgs(arg3, arg4);\n        return [\n            arg1,\n            arg2,\n            message2,\n            pipe2\n        ];\n    }\n    const [message, pipe] = defaultArgs(arg2, arg3);\n    return [\n        string(),\n        arg1,\n        message,\n        pipe\n    ];\n}\n// src/schemas/record/values.ts\nvar BLOCKED_KEYS = [\n    \"__proto__\",\n    \"prototype\",\n    \"constructor\"\n];\n// src/schemas/record/record.ts\nfunction record(arg1, arg2, arg3, arg4) {\n    const [key, value2, message, pipe] = recordArgs(arg1, arg2, arg3, arg4);\n    return {\n        type: \"record\",\n        expects: \"Object\",\n        async: false,\n        key,\n        value: value2,\n        message,\n        pipe,\n        _parse (input, config) {\n            if (input && typeof input === \"object\") {\n                let typed = true;\n                let issues;\n                const output = {};\n                for (const [inputKey, inputValue] of Object.entries(input)){\n                    if (!BLOCKED_KEYS.includes(inputKey)) {\n                        let pathItem;\n                        const keyResult = this.key._parse(inputKey, config);\n                        if (keyResult.issues) {\n                            pathItem = {\n                                type: \"record\",\n                                origin: \"key\",\n                                input,\n                                key: inputKey,\n                                value: inputValue\n                            };\n                            for (const issue of keyResult.issues){\n                                issue.path = [\n                                    pathItem\n                                ];\n                                issues?.push(issue);\n                            }\n                            if (!issues) {\n                                issues = keyResult.issues;\n                            }\n                            if (config?.abortEarly) {\n                                typed = false;\n                                break;\n                            }\n                        }\n                        const valueResult = this.value._parse(inputValue, config);\n                        if (valueResult.issues) {\n                            pathItem = pathItem ?? {\n                                type: \"record\",\n                                origin: \"value\",\n                                input,\n                                key: inputKey,\n                                value: inputValue\n                            };\n                            for (const issue of valueResult.issues){\n                                if (issue.path) {\n                                    issue.path.unshift(pathItem);\n                                } else {\n                                    issue.path = [\n                                        pathItem\n                                    ];\n                                }\n                                issues?.push(issue);\n                            }\n                            if (!issues) {\n                                issues = valueResult.issues;\n                            }\n                            if (config?.abortEarly) {\n                                typed = false;\n                                break;\n                            }\n                        }\n                        if (!keyResult.typed || !valueResult.typed) {\n                            typed = false;\n                        }\n                        if (keyResult.typed) {\n                            output[keyResult.output] = valueResult.output;\n                        }\n                    }\n                }\n                if (typed) {\n                    return pipeResult(this, output, config, issues);\n                }\n                return schemaResult(false, output, issues);\n            }\n            return schemaIssue(this, record, input, config);\n        }\n    };\n}\n// src/schemas/record/recordAsync.ts\nfunction recordAsync(arg1, arg2, arg3, arg4) {\n    const [key, value2, message, pipe] = recordArgs(arg1, arg2, arg3, arg4);\n    return {\n        type: \"record\",\n        expects: \"Object\",\n        async: true,\n        key,\n        value: value2,\n        message,\n        pipe,\n        async _parse (input, config) {\n            if (input && typeof input === \"object\") {\n                let typed = true;\n                let issues;\n                const output = {};\n                await Promise.all(// Note: `Object.entries(...)` converts each key to a string\n                Object.entries(input).map(async ([inputKey, inputValue])=>{\n                    if (!BLOCKED_KEYS.includes(inputKey)) {\n                        let pathItem;\n                        const [keyResult, valueResult] = await Promise.all([\n                            {\n                                schema: this.key,\n                                value: inputKey,\n                                origin: \"key\"\n                            },\n                            {\n                                schema: this.value,\n                                value: inputValue,\n                                origin: \"value\"\n                            }\n                        ].map(async ({ schema, value: value3, origin })=>{\n                            if (!(config?.abortEarly && issues)) {\n                                const result = await schema._parse(value3, config);\n                                if (!(config?.abortEarly && issues)) {\n                                    if (result.issues) {\n                                        pathItem = pathItem ?? {\n                                            type: \"record\",\n                                            origin,\n                                            input,\n                                            key: inputKey,\n                                            value: inputValue\n                                        };\n                                        for (const issue of result.issues){\n                                            if (issue.path) {\n                                                issue.path.unshift(pathItem);\n                                            } else {\n                                                issue.path = [\n                                                    pathItem\n                                                ];\n                                            }\n                                            issues?.push(issue);\n                                        }\n                                        if (!issues) {\n                                            issues = result.issues;\n                                        }\n                                        if (config?.abortEarly) {\n                                            throw null;\n                                        }\n                                    }\n                                    return result;\n                                }\n                            }\n                        })).catch(()=>[]);\n                        if (!keyResult?.typed || !valueResult?.typed) {\n                            typed = false;\n                        }\n                        if (keyResult?.typed && valueResult) {\n                            output[keyResult.output] = valueResult.output;\n                        }\n                    }\n                }));\n                if (typed) {\n                    return pipeResultAsync(this, output, config, issues);\n                }\n                return schemaResult(false, output, issues);\n            }\n            return schemaIssue(this, recordAsync, input, config);\n        }\n    };\n}\n// src/schemas/set/set.ts\nfunction set(value2, arg2, arg3) {\n    const [message, pipe] = defaultArgs(arg2, arg3);\n    return {\n        type: \"set\",\n        expects: \"Set\",\n        async: false,\n        value: value2,\n        message,\n        pipe,\n        _parse (input, config) {\n            if (input instanceof Set) {\n                let key = 0;\n                let typed = true;\n                let issues;\n                const output = /* @__PURE__ */ new Set();\n                for (const inputValue of input){\n                    const result = this.value._parse(inputValue, config);\n                    if (result.issues) {\n                        const pathItem = {\n                            type: \"set\",\n                            origin: \"value\",\n                            input,\n                            key,\n                            value: inputValue\n                        };\n                        for (const issue of result.issues){\n                            if (issue.path) {\n                                issue.path.unshift(pathItem);\n                            } else {\n                                issue.path = [\n                                    pathItem\n                                ];\n                            }\n                            issues?.push(issue);\n                        }\n                        if (!issues) {\n                            issues = result.issues;\n                        }\n                        if (config?.abortEarly) {\n                            typed = false;\n                            break;\n                        }\n                    }\n                    if (!result.typed) {\n                        typed = false;\n                    }\n                    output.add(result.output);\n                    key++;\n                }\n                if (typed) {\n                    return pipeResult(this, output, config, issues);\n                }\n                return schemaResult(false, output, issues);\n            }\n            return schemaIssue(this, set, input, config);\n        }\n    };\n}\n// src/schemas/set/setAsync.ts\nfunction setAsync(value2, arg2, arg3) {\n    const [message, pipe] = defaultArgs(arg2, arg3);\n    return {\n        type: \"set\",\n        expects: \"Set\",\n        async: true,\n        value: value2,\n        message,\n        pipe,\n        async _parse (input, config) {\n            if (input instanceof Set) {\n                let typed = true;\n                let issues;\n                const output = /* @__PURE__ */ new Set();\n                await Promise.all(Array.from(input.values()).map(async (inputValue, key)=>{\n                    if (!(config?.abortEarly && issues)) {\n                        const result = await this.value._parse(inputValue, config);\n                        if (!(config?.abortEarly && issues)) {\n                            if (result.issues) {\n                                const pathItem = {\n                                    type: \"set\",\n                                    origin: \"value\",\n                                    input,\n                                    key,\n                                    value: inputValue\n                                };\n                                for (const issue of result.issues){\n                                    if (issue.path) {\n                                        issue.path.unshift(pathItem);\n                                    } else {\n                                        issue.path = [\n                                            pathItem\n                                        ];\n                                    }\n                                    issues?.push(issue);\n                                }\n                                if (!issues) {\n                                    issues = result.issues;\n                                }\n                                if (config?.abortEarly) {\n                                    typed = false;\n                                    throw null;\n                                }\n                            }\n                            if (!result.typed) {\n                                typed = false;\n                            }\n                            output.add(result.output);\n                        }\n                    }\n                })).catch(()=>null);\n                if (typed) {\n                    return pipeResultAsync(this, output, config, issues);\n                }\n                return schemaResult(false, output, issues);\n            }\n            return schemaIssue(this, setAsync, input, config);\n        }\n    };\n}\n// src/schemas/special/special.ts\nfunction special(check, arg2, arg3) {\n    const [message, pipe] = defaultArgs(arg2, arg3);\n    return {\n        type: \"special\",\n        expects: \"unknown\",\n        async: false,\n        check,\n        message,\n        pipe,\n        _parse (input, config) {\n            if (this.check(input)) {\n                return pipeResult(this, input, config);\n            }\n            return schemaIssue(this, special, input, config);\n        }\n    };\n}\n// src/schemas/special/specialAsync.ts\nfunction specialAsync(check, arg2, arg3) {\n    const [message, pipe] = defaultArgs(arg2, arg3);\n    return {\n        type: \"special\",\n        expects: \"unknown\",\n        async: true,\n        check,\n        message,\n        pipe,\n        async _parse (input, config) {\n            if (await this.check(input)) {\n                return pipeResultAsync(this, input, config);\n            }\n            return schemaIssue(this, specialAsync, input, config);\n        }\n    };\n}\n// src/schemas/symbol/symbol.ts\nfunction symbol(message) {\n    return {\n        type: \"symbol\",\n        expects: \"symbol\",\n        async: false,\n        message,\n        _parse (input, config) {\n            if (typeof input === \"symbol\") {\n                return schemaResult(true, input);\n            }\n            return schemaIssue(this, symbol, input, config);\n        }\n    };\n}\n// src/schemas/symbol/symbolAsync.ts\nfunction symbolAsync(message) {\n    return {\n        type: \"symbol\",\n        expects: \"symbol\",\n        async: true,\n        message,\n        async _parse (input, config) {\n            if (typeof input === \"symbol\") {\n                return schemaResult(true, input);\n            }\n            return schemaIssue(this, symbolAsync, input, config);\n        }\n    };\n}\n// src/schemas/tuple/tuple.ts\nfunction tuple(items, arg2, arg3, arg4) {\n    const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n    return {\n        type: \"tuple\",\n        expects: \"Array\",\n        async: false,\n        items,\n        rest,\n        message,\n        pipe,\n        _parse (input, config) {\n            if (Array.isArray(input)) {\n                let typed = true;\n                let issues;\n                const output = [];\n                for(let key = 0; key < this.items.length; key++){\n                    const value2 = input[key];\n                    const result = this.items[key]._parse(value2, config);\n                    if (result.issues) {\n                        const pathItem = {\n                            type: \"tuple\",\n                            origin: \"value\",\n                            input,\n                            key,\n                            value: value2\n                        };\n                        for (const issue of result.issues){\n                            if (issue.path) {\n                                issue.path.unshift(pathItem);\n                            } else {\n                                issue.path = [\n                                    pathItem\n                                ];\n                            }\n                            issues?.push(issue);\n                        }\n                        if (!issues) {\n                            issues = result.issues;\n                        }\n                        if (config?.abortEarly) {\n                            typed = false;\n                            break;\n                        }\n                    }\n                    if (!result.typed) {\n                        typed = false;\n                    }\n                    output[key] = result.output;\n                }\n                if (this.rest && !(config?.abortEarly && issues)) {\n                    for(let key = this.items.length; key < input.length; key++){\n                        const value2 = input[key];\n                        const result = this.rest._parse(value2, config);\n                        if (result.issues) {\n                            const pathItem = {\n                                type: \"tuple\",\n                                origin: \"value\",\n                                input,\n                                key,\n                                value: value2\n                            };\n                            for (const issue of result.issues){\n                                if (issue.path) {\n                                    issue.path.unshift(pathItem);\n                                } else {\n                                    issue.path = [\n                                        pathItem\n                                    ];\n                                }\n                                issues?.push(issue);\n                            }\n                            if (!issues) {\n                                issues = result.issues;\n                            }\n                            if (config?.abortEarly) {\n                                typed = false;\n                                break;\n                            }\n                        }\n                        if (!result.typed) {\n                            typed = false;\n                        }\n                        output[key] = result.output;\n                    }\n                }\n                if (typed) {\n                    return pipeResult(this, output, config, issues);\n                }\n                return schemaResult(false, output, issues);\n            }\n            return schemaIssue(this, tuple, input, config);\n        }\n    };\n}\n// src/schemas/tuple/tupleAsync.ts\nfunction tupleAsync(items, arg2, arg3, arg4) {\n    const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n    return {\n        type: \"tuple\",\n        expects: \"Array\",\n        async: true,\n        items,\n        rest,\n        message,\n        pipe,\n        async _parse (input, config) {\n            if (Array.isArray(input)) {\n                let typed = true;\n                let issues;\n                const output = [];\n                await Promise.all([\n                    // Parse schema of each tuple item\n                    Promise.all(this.items.map(async (schema, key)=>{\n                        if (!(config?.abortEarly && issues)) {\n                            const value2 = input[key];\n                            const result = await schema._parse(value2, config);\n                            if (!(config?.abortEarly && issues)) {\n                                if (result.issues) {\n                                    const pathItem = {\n                                        type: \"tuple\",\n                                        origin: \"value\",\n                                        input,\n                                        key,\n                                        value: value2\n                                    };\n                                    for (const issue of result.issues){\n                                        if (issue.path) {\n                                            issue.path.unshift(pathItem);\n                                        } else {\n                                            issue.path = [\n                                                pathItem\n                                            ];\n                                        }\n                                        issues?.push(issue);\n                                    }\n                                    if (!issues) {\n                                        issues = result.issues;\n                                    }\n                                    if (config?.abortEarly) {\n                                        typed = false;\n                                        throw null;\n                                    }\n                                }\n                                if (!result.typed) {\n                                    typed = false;\n                                }\n                                output[key] = result.output;\n                            }\n                        }\n                    })),\n                    // If necessary parse schema of each rest item\n                    this.rest && Promise.all(input.slice(this.items.length).map(async (value2, index)=>{\n                        if (!(config?.abortEarly && issues)) {\n                            const key = this.items.length + index;\n                            const result = await this.rest._parse(value2, config);\n                            if (!(config?.abortEarly && issues)) {\n                                if (result.issues) {\n                                    const pathItem = {\n                                        type: \"tuple\",\n                                        origin: \"value\",\n                                        input,\n                                        key,\n                                        value: value2\n                                    };\n                                    for (const issue of result.issues){\n                                        if (issue.path) {\n                                            issue.path.unshift(pathItem);\n                                        } else {\n                                            issue.path = [\n                                                pathItem\n                                            ];\n                                        }\n                                        issues?.push(issue);\n                                    }\n                                    if (!issues) {\n                                        issues = result.issues;\n                                    }\n                                    if (config?.abortEarly) {\n                                        typed = false;\n                                        throw null;\n                                    }\n                                }\n                                if (!result.typed) {\n                                    typed = false;\n                                }\n                                output[key] = result.output;\n                            }\n                        }\n                    }))\n                ]).catch(()=>null);\n                if (typed) {\n                    return pipeResultAsync(this, output, config, issues);\n                }\n                return schemaResult(false, output, issues);\n            }\n            return schemaIssue(this, tupleAsync, input, config);\n        }\n    };\n}\n// src/schemas/undefined/undefined.ts\nfunction undefined_(message) {\n    return {\n        type: \"undefined\",\n        expects: \"undefined\",\n        async: false,\n        message,\n        _parse (input, config) {\n            if (input === void 0) {\n                return schemaResult(true, input);\n            }\n            return schemaIssue(this, undefined_, input, config);\n        }\n    };\n}\n// src/schemas/undefined/undefinedAsync.ts\nfunction undefinedAsync(message) {\n    return {\n        type: \"undefined\",\n        expects: \"undefined\",\n        async: true,\n        message,\n        async _parse (input, config) {\n            if (input === void 0) {\n                return schemaResult(true, input);\n            }\n            return schemaIssue(this, undefinedAsync, input, config);\n        }\n    };\n}\n// src/schemas/union/utils/subissues/subissues.ts\nfunction subissues(results) {\n    let issues;\n    if (results) {\n        for (const result of results){\n            if (issues) {\n                for (const issue of result.issues){\n                    issues.push(issue);\n                }\n            } else {\n                issues = result.issues;\n            }\n        }\n    }\n    return issues;\n}\n// src/schemas/union/union.ts\nfunction union(options, arg2, arg3) {\n    const [message, pipe] = defaultArgs(arg2, arg3);\n    return {\n        type: \"union\",\n        expects: [\n            ...new Set(options.map((option)=>option.expects))\n        ].join(\" | \"),\n        async: false,\n        options,\n        message,\n        pipe,\n        _parse (input, config) {\n            let validResult;\n            let untypedResults;\n            let typedResults;\n            for (const schema of this.options){\n                const result = schema._parse(input, config);\n                if (result.typed) {\n                    if (!result.issues) {\n                        validResult = result;\n                        break;\n                    } else {\n                        typedResults ? typedResults.push(result) : typedResults = [\n                            result\n                        ];\n                    }\n                } else {\n                    untypedResults ? untypedResults.push(result) : untypedResults = [\n                        result\n                    ];\n                }\n            }\n            if (validResult) {\n                return pipeResult(this, validResult.output, config);\n            }\n            if (typedResults?.length) {\n                const firstResult = typedResults[0];\n                return pipeResult(this, firstResult.output, config, // Hint: If there is more than one typed result, we use a general\n                // union issue with subissues because the issues could contradict\n                // each other.\n                typedResults.length === 1 ? firstResult.issues : schemaIssue(this, union, input, config, {\n                    reason: \"union\",\n                    issues: subissues(typedResults)\n                }).issues);\n            }\n            if (untypedResults?.length === 1) {\n                return untypedResults[0];\n            }\n            return schemaIssue(this, union, input, config, {\n                issues: subissues(untypedResults)\n            });\n        }\n    };\n}\n// src/schemas/union/unionAsync.ts\nfunction unionAsync(options, arg2, arg3) {\n    const [message, pipe] = defaultArgs(arg2, arg3);\n    return {\n        type: \"union\",\n        expects: [\n            ...new Set(options.map((option)=>option.expects))\n        ].join(\" | \"),\n        async: true,\n        options,\n        message,\n        pipe,\n        async _parse (input, config) {\n            let validResult;\n            let untypedResults;\n            let typedResults;\n            for (const schema of this.options){\n                const result = await schema._parse(input, config);\n                if (result.typed) {\n                    if (!result.issues) {\n                        validResult = result;\n                        break;\n                    } else {\n                        typedResults ? typedResults.push(result) : typedResults = [\n                            result\n                        ];\n                    }\n                } else {\n                    untypedResults ? untypedResults.push(result) : untypedResults = [\n                        result\n                    ];\n                }\n            }\n            if (validResult) {\n                return pipeResultAsync(this, validResult.output, config);\n            }\n            if (typedResults?.length) {\n                const firstResult = typedResults[0];\n                return pipeResultAsync(this, firstResult.output, config, // Hint: If there is more than one typed result, we use a general\n                // union issue with subissues because the issues could contradict\n                // each other.\n                typedResults.length === 1 ? firstResult.issues : schemaIssue(this, unionAsync, input, config, {\n                    reason: \"union\",\n                    issues: subissues(typedResults)\n                }).issues);\n            }\n            if (untypedResults?.length === 1) {\n                return untypedResults[0];\n            }\n            return schemaIssue(this, unionAsync, input, config, {\n                issues: subissues(untypedResults)\n            });\n        }\n    };\n}\n// src/schemas/unknown/unknown.ts\nfunction unknown(pipe) {\n    return {\n        type: \"unknown\",\n        expects: \"unknown\",\n        async: false,\n        pipe,\n        _parse (input, config) {\n            return pipeResult(this, input, config);\n        }\n    };\n}\n// src/schemas/unknown/unknownAsync.ts\nfunction unknownAsync(pipe) {\n    return {\n        type: \"unknown\",\n        expects: \"unknown\",\n        async: true,\n        pipe,\n        async _parse (input, config) {\n            return pipeResultAsync(this, input, config);\n        }\n    };\n}\n// src/schemas/variant/variant.ts\nfunction variant(key, options, arg3, arg4) {\n    const [message, pipe] = defaultArgs(arg3, arg4);\n    let cachedExpectedKey;\n    return {\n        type: \"variant\",\n        expects: \"Object\",\n        async: false,\n        key,\n        options,\n        message,\n        pipe,\n        _parse (input, config) {\n            if (input && typeof input === \"object\") {\n                if (this.key in input || !cachedExpectedKey) {\n                    let expectedKey;\n                    let variantResult;\n                    const parseOptions = (options2)=>{\n                        for (const schema of options2){\n                            if (schema.type === \"object\") {\n                                const keySchema = schema.entries[this.key];\n                                const keyResult = keySchema._parse(input[this.key], config);\n                                if (!cachedExpectedKey) {\n                                    expectedKey ? expectedKey.push(keySchema.expects) : expectedKey = [\n                                        keySchema.expects\n                                    ];\n                                }\n                                if (!keyResult.issues) {\n                                    const dataResult = schema._parse(input, config);\n                                    if (!dataResult.issues) {\n                                        variantResult = dataResult;\n                                        break;\n                                    }\n                                    if (!variantResult || !variantResult.typed && dataResult.typed) {\n                                        variantResult = dataResult;\n                                    }\n                                }\n                            } else if (schema.type === \"variant\") {\n                                parseOptions(schema.options);\n                                if (variantResult && !variantResult.issues) {\n                                    break;\n                                }\n                            }\n                        }\n                    };\n                    parseOptions(this.options);\n                    cachedExpectedKey = cachedExpectedKey || [\n                        ...new Set(expectedKey)\n                    ].join(\" | \");\n                    if (variantResult) {\n                        if (variantResult.typed) {\n                            return pipeResult(this, variantResult.output, config, variantResult.issues);\n                        }\n                        return variantResult;\n                    }\n                }\n                const value2 = input[this.key];\n                return schemaIssue(this, variant, value2, config, {\n                    expected: cachedExpectedKey,\n                    path: [\n                        {\n                            type: \"object\",\n                            origin: \"value\",\n                            input,\n                            key: this.key,\n                            value: value2\n                        }\n                    ]\n                });\n            }\n            return schemaIssue(this, variant, input, config);\n        }\n    };\n}\n// src/schemas/variant/variantAsync.ts\nfunction variantAsync(key, options, arg3, arg4) {\n    const [message, pipe] = defaultArgs(arg3, arg4);\n    let cachedExpectedKey;\n    return {\n        type: \"variant\",\n        expects: \"Object\",\n        async: true,\n        key,\n        options,\n        message,\n        pipe,\n        async _parse (input, config) {\n            if (input && typeof input === \"object\") {\n                if (this.key in input || !cachedExpectedKey) {\n                    let expectedKey;\n                    let variantResult;\n                    const parseOptions = async (options2)=>{\n                        for (const schema of options2){\n                            if (schema.type === \"object\") {\n                                const keySchema = schema.entries[this.key];\n                                const keyResult = await keySchema._parse(input[this.key], config);\n                                if (!cachedExpectedKey) {\n                                    expectedKey ? expectedKey.push(keySchema.expects) : expectedKey = [\n                                        keySchema.expects\n                                    ];\n                                }\n                                if (!keyResult.issues) {\n                                    const dataResult = await schema._parse(input, config);\n                                    if (!dataResult.issues) {\n                                        variantResult = dataResult;\n                                        break;\n                                    }\n                                    if (!variantResult || !variantResult.typed && dataResult.typed) {\n                                        variantResult = dataResult;\n                                    }\n                                }\n                            } else if (schema.type === \"variant\") {\n                                await parseOptions(schema.options);\n                                if (variantResult && !variantResult.issues) {\n                                    break;\n                                }\n                            }\n                        }\n                    };\n                    await parseOptions(this.options);\n                    cachedExpectedKey = cachedExpectedKey || [\n                        ...new Set(expectedKey)\n                    ].join(\" | \");\n                    if (variantResult) {\n                        if (variantResult.typed) {\n                            return pipeResultAsync(this, variantResult.output, config, variantResult.issues);\n                        }\n                        return variantResult;\n                    }\n                }\n                const value2 = input[this.key];\n                return schemaIssue(this, variantAsync, value2, config, {\n                    expected: cachedExpectedKey,\n                    path: [\n                        {\n                            type: \"object\",\n                            origin: \"value\",\n                            input,\n                            key: this.key,\n                            value: value2\n                        }\n                    ]\n                });\n            }\n            return schemaIssue(this, variantAsync, input, config);\n        }\n    };\n}\n// src/schemas/void/void.ts\nfunction void_(message) {\n    return {\n        type: \"void\",\n        expects: \"void\",\n        async: false,\n        message,\n        _parse (input, config) {\n            if (input === void 0) {\n                return schemaResult(true, input);\n            }\n            return schemaIssue(this, void_, input, config);\n        }\n    };\n}\n// src/schemas/void/voidAsync.ts\nfunction voidAsync(message) {\n    return {\n        type: \"void\",\n        expects: \"void\",\n        async: true,\n        message,\n        async _parse (input, config) {\n            if (input === void 0) {\n                return schemaResult(true, input);\n            }\n            return schemaIssue(this, voidAsync, input, config);\n        }\n    };\n}\n// src/methods/keyof/keyof.ts\nfunction keyof(schema) {\n    return picklist(Object.keys(schema.entries));\n}\n// src/methods/merge/merge.ts\nfunction merge(schemas, arg2, arg3, arg4) {\n    const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n    return object(schemas.reduce((entries, schema)=>({\n            ...entries,\n            ...schema.entries\n        }), {}), rest, message, pipe);\n}\n// src/methods/merge/mergeAsync.ts\nfunction mergeAsync(schemas, arg2, arg3, arg4) {\n    const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n    return objectAsync(schemas.reduce((entries, schema)=>({\n            ...entries,\n            ...schema.entries\n        }), {}), rest, message, pipe);\n}\n// src/methods/omit/omit.ts\nfunction omit(schema, keys, arg3, arg4, arg5) {\n    const [rest, message, pipe] = restAndDefaultArgs(arg3, arg4, arg5);\n    return object(Object.entries(schema.entries).reduce((entries, [key, schema2])=>keys.includes(key) ? entries : {\n            ...entries,\n            [key]: schema2\n        }, {}), rest, message, pipe);\n}\n// src/methods/omit/omitAsync.ts\nfunction omitAsync(schema, keys, arg3, arg4, arg5) {\n    const [rest, message, pipe] = restAndDefaultArgs(arg3, arg4, arg5);\n    return objectAsync(Object.entries(schema.entries).reduce((entries, [key, schema2])=>keys.includes(key) ? entries : {\n            ...entries,\n            [key]: schema2\n        }, {}), rest, message, pipe);\n}\n// src/methods/parse/parse.ts\nfunction parse(schema, input, config) {\n    const result = schema._parse(input, getGlobalConfig(config));\n    if (result.issues) {\n        throw new ValiError(result.issues);\n    }\n    return result.output;\n}\n// src/methods/parse/parseAsync.ts\nasync function parseAsync(schema, input, config) {\n    const result = await schema._parse(input, getGlobalConfig(config));\n    if (result.issues) {\n        throw new ValiError(result.issues);\n    }\n    return result.output;\n}\n// src/methods/partial/partial.ts\nfunction partial(schema, arg2, arg3, arg4) {\n    const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n    return object(Object.entries(schema.entries).reduce((entries, [key, schema2])=>({\n            ...entries,\n            [key]: optional(schema2)\n        }), {}), rest, message, pipe);\n}\n// src/methods/partial/partialAsync.ts\nfunction partialAsync(schema, arg2, arg3, arg4) {\n    const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n    return objectAsync(Object.entries(schema.entries).reduce((entries, [key, schema2])=>({\n            ...entries,\n            [key]: optionalAsync(schema2)\n        }), {}), rest, message, pipe);\n}\n// src/methods/pick/pick.ts\nfunction pick(schema, keys, arg3, arg4, arg5) {\n    const [rest, message, pipe] = restAndDefaultArgs(arg3, arg4, arg5);\n    return object(Object.entries(schema.entries).reduce((entries, [key, schema2])=>keys.includes(key) ? {\n            ...entries,\n            [key]: schema2\n        } : entries, {}), rest, message, pipe);\n}\n// src/methods/pick/pickAsync.ts\nfunction pickAsync(schema, keys, arg3, arg4, arg5) {\n    const [rest, message, pipe] = restAndDefaultArgs(arg3, arg4, arg5);\n    return objectAsync(Object.entries(schema.entries).reduce((entries, [key, schema2])=>keys.includes(key) ? {\n            ...entries,\n            [key]: schema2\n        } : entries, {}), rest, message, pipe);\n}\n// src/methods/required/required.ts\nfunction required(schema, arg2, arg3, arg4) {\n    const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n    return object(Object.entries(schema.entries).reduce((entries, [key, schema2])=>({\n            ...entries,\n            [key]: nonOptional(schema2)\n        }), {}), rest, message, pipe);\n}\n// src/methods/required/requiredAsync.ts\nfunction requiredAsync(schema, arg2, arg3, arg4) {\n    const [rest, message, pipe] = restAndDefaultArgs(arg2, arg3, arg4);\n    return objectAsync(Object.entries(schema.entries).reduce((entries, [key, schema2])=>({\n            ...entries,\n            [key]: nonOptionalAsync(schema2)\n        }), {}), rest, message, pipe);\n}\n// src/methods/safeParse/safeParse.ts\nfunction safeParse(schema, input, config) {\n    const result = schema._parse(input, getGlobalConfig(config));\n    return {\n        typed: result.typed,\n        success: !result.issues,\n        output: result.output,\n        issues: result.issues\n    };\n}\n// src/methods/safeParse/safeParseAsync.ts\nasync function safeParseAsync(schema, input, config) {\n    const result = await schema._parse(input, getGlobalConfig(config));\n    return {\n        typed: result.typed,\n        success: !result.issues,\n        output: result.output,\n        issues: result.issues\n    };\n}\n// src/methods/transform/transform.ts\nfunction transform(schema, action, arg1) {\n    return {\n        ...schema,\n        _parse (input, config) {\n            const result = schema._parse(input, config);\n            if (result.issues) {\n                result.typed = false;\n            } else {\n                result.output = action(result.output, {\n                    issues: result.issues\n                });\n                if (arg1) {\n                    if (Array.isArray(arg1)) {\n                        return pipeResult({\n                            type: typeof result.output,\n                            pipe: arg1\n                        }, result.output, config);\n                    }\n                    return arg1._parse(result.output, config);\n                }\n            }\n            return result;\n        }\n    };\n}\n// src/methods/transform/transformAsync.ts\nfunction transformAsync(schema, action, arg1) {\n    return {\n        ...schema,\n        async: true,\n        async _parse (input, config) {\n            const result = await schema._parse(input, config);\n            if (result.issues) {\n                result.typed = false;\n            } else {\n                result.output = await action(result.output, {\n                    issues: result.issues\n                });\n                if (arg1) {\n                    if (Array.isArray(arg1)) {\n                        return pipeResultAsync({\n                            type: typeof result.output,\n                            pipe: arg1\n                        }, result.output, config);\n                    }\n                    return arg1._parse(result.output, config);\n                }\n            }\n            return result;\n        }\n    };\n}\n// src/methods/unwrap/unwrap.ts\nfunction unwrap(schema) {\n    return schema.wrapped;\n}\n// src/regex.ts\nvar BIC_REGEX = /^[A-Z]{6}(?!00)[A-Z\\d]{2}(?:[A-Z\\d]{3})?$/u;\nvar CUID2_REGEX = /^[a-z][\\da-z]*$/u;\nvar DECIMAL_REGEX = /^\\d+$/u;\nvar EMAIL_REGEX = /^[\\w+-]+(?:\\.[\\w+-]+)*@[\\da-z]+(?:[.-][\\da-z]+)*\\.[a-z]{2,}$/iu;\nvar EMOJI_REGEX = /^[\\p{Extended_Pictographic}\\p{Emoji_Component}]+$/u;\nvar HEXADECIMAL_REGEX = /^(0h|0x)?[\\da-f]+$/iu;\nvar HEX_COLOR_REGEX = /^#([\\da-f]{3}|[\\da-f]{4}|[\\da-f]{6}|[\\da-f]{8})$/iu;\nvar IMEI_REGEX = /^\\d{2}(?:[ /|-]?\\d{6}){2}[ /|-]?\\d$/u;\nvar IPV4_REGEX = // eslint-disable-next-line redos-detector/no-unsafe-regex -- false positive\n/^(?:(?:[1-9]|1\\d|2[0-4])?\\d|25[0-5])(?:\\.(?:(?:[1-9]|1\\d|2[0-4])?\\d|25[0-5])){3}$/u;\nvar IPV6_REGEX = /^(?:(?:[\\da-f]{1,4}:){7}[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){1,7}:|(?:[\\da-f]{1,4}:){1,6}:[\\da-f]{1,4}|(?:[\\da-f]{1,4}:){1,5}(?::[\\da-f]{1,4}){1,2}|(?:[\\da-f]{1,4}:){1,4}(?::[\\da-f]{1,4}){1,3}|(?:[\\da-f]{1,4}:){1,3}(?::[\\da-f]{1,4}){1,4}|(?:[\\da-f]{1,4}:){1,2}(?::[\\da-f]{1,4}){1,5}|[\\da-f]{1,4}:(?::[\\da-f]{1,4}){1,6}|:(?:(?::[\\da-f]{1,4}){1,7}|:)|fe80:(?::[\\da-f]{0,4}){0,4}%[\\da-z]+|::(?:f{4}(?::0{1,4})?:)?(?:(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)\\.){3}(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)|(?:[\\da-f]{1,4}:){1,4}:(?:(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d)\\.){3}(?:25[0-5]|(?:2[0-4]|1?\\d)?\\d))$/iu;\nvar ISO_DATE_REGEX = /^\\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\\d|0[1-9]|3[01])$/u;\nvar ISO_DATE_TIME_REGEX = /^\\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\\d|0[1-9]|3[01])T(?:0\\d|1\\d|2[0-3]):[0-5]\\d$/u;\nvar ISO_TIME_REGEX = /^(?:0\\d|1\\d|2[0-3]):[0-5]\\d$/u;\nvar ISO_TIME_SECOND_REGEX = /^(?:0\\d|1\\d|2[0-3])(?::[0-5]\\d){2}$/u;\nvar ISO_TIMESTAMP_REGEX = /^\\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\\d|0[1-9]|3[01])T(?:0\\d|1\\d|2[0-3])(?::[0-5]\\d){2}(?:\\.\\d{1,9})?Z$/u;\nvar ISO_WEEK_REGEX = /^\\d{4}-W(?:0[1-9]|[1-4]\\d|5[0-3])$/u;\nvar MAC48_REGEX = /^(?:[\\da-f]{2}:){5}[\\da-f]{2}$|^(?:[\\da-f]{2}-){5}[\\da-f]{2}$|^(?:[\\da-f]{4}\\.){2}[\\da-f]{4}$/iu;\nvar MAC64_REGEX = /^(?:[\\da-f]{2}:){7}[\\da-f]{2}$|^(?:[\\da-f]{2}-){7}[\\da-f]{2}$|^(?:[\\da-f]{4}\\.){3}[\\da-f]{4}$|^(?:[\\da-f]{4}:){3}[\\da-f]{4}$/iu;\nvar OCTAL_REGEX = /^(0o)?[0-7]+$/iu;\nvar ULID_REGEX = /^[\\da-hjkmnp-tv-z]{26}$/iu;\nvar UUID_REGEX = /^[\\da-f]{8}(?:-[\\da-f]{4}){3}-[\\da-f]{12}$/iu;\n// src/transformations/toCustom/toCustom.ts\nfunction toCustom(action) {\n    return {\n        type: \"to_custom\",\n        async: false,\n        _parse (input) {\n            return actionOutput(action(input));\n        }\n    };\n}\n// src/transformations/toCustom/toCustomAsync.ts\nfunction toCustomAsync(action) {\n    return {\n        type: \"to_custom\",\n        async: true,\n        async _parse (input) {\n            return actionOutput(await action(input));\n        }\n    };\n}\n// src/transformations/toLowerCase/toLowerCase.ts\nfunction toLowerCase() {\n    return {\n        type: \"to_lower_case\",\n        async: false,\n        _parse (input) {\n            return actionOutput(input.toLocaleLowerCase());\n        }\n    };\n}\n// src/transformations/toMaxValue/toMaxValue.ts\nfunction toMaxValue(requirement) {\n    return {\n        type: \"to_max_value\",\n        async: false,\n        requirement,\n        _parse (input) {\n            return actionOutput(input > this.requirement ? this.requirement : input);\n        }\n    };\n}\n// src/transformations/toMinValue/toMinValue.ts\nfunction toMinValue(requirement) {\n    return {\n        type: \"to_min_value\",\n        async: false,\n        requirement,\n        _parse (input) {\n            return actionOutput(input < this.requirement ? this.requirement : input);\n        }\n    };\n}\n// src/transformations/toTrimmed/toTrimmed.ts\nfunction toTrimmed() {\n    return {\n        type: \"to_trimmed\",\n        async: false,\n        _parse (input) {\n            return actionOutput(input.trim());\n        }\n    };\n}\n// src/transformations/toTrimmedEnd/toTrimmedEnd.ts\nfunction toTrimmedEnd() {\n    return {\n        type: \"to_trimmed_end\",\n        async: false,\n        _parse (input) {\n            return actionOutput(input.trimEnd());\n        }\n    };\n}\n// src/transformations/toTrimmedStart/toTrimmedStart.ts\nfunction toTrimmedStart() {\n    return {\n        type: \"to_trimmed_start\",\n        async: false,\n        _parse (input) {\n            return actionOutput(input.trimStart());\n        }\n    };\n}\n// src/transformations/toUpperCase/toUpperCase.ts\nfunction toUpperCase() {\n    return {\n        type: \"to_upper_case\",\n        async: false,\n        _parse (input) {\n            return actionOutput(input.toUpperCase());\n        }\n    };\n}\n// src/validations/bic/bic.ts\nfunction bic(message) {\n    return {\n        type: \"bic\",\n        expects: null,\n        async: false,\n        message,\n        requirement: BIC_REGEX,\n        _parse (input) {\n            if (this.requirement.test(input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, bic, input, \"BIC\");\n        }\n    };\n}\n// src/validations/bytes/bytes.ts\nfunction bytes(requirement, message) {\n    return {\n        type: \"bytes\",\n        expects: `${requirement}`,\n        async: false,\n        message,\n        requirement,\n        _parse (input) {\n            const length2 = new TextEncoder().encode(input).length;\n            if (length2 === this.requirement) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, bytes, input, \"bytes\", `${length2}`);\n        }\n    };\n}\n// src/validations/creditCard/creditCard.ts\nvar SANITIZE_REGEX = /[- ]+/gu;\nvar PROVIDER_REGEX_LIST = [\n    // American Express\n    /^3[47]\\d{13}$/u,\n    // Diners Club\n    /^3(?:0[0-5]|[68]\\d)\\d{11}$/u,\n    // Discover\n    /^6(?:011|5\\d{2})\\d{12,15}$/u,\n    // JCB\n    /^(?:2131|1800|35\\d{3})\\d{11}$/u,\n    // Mastercard\n    /^5[1-5]\\d{2}|(222\\d|22[3-9]\\d|2[3-6]\\d{2}|27[01]\\d|2720)\\d{12}$/u,\n    // UnionPay\n    /^(6[27]\\d{14}|81\\d{14,17})$/u,\n    // Visa\n    /^4\\d{12}(?:\\d{3,6})?$/u\n];\nfunction creditCard(message) {\n    return {\n        type: \"credit_card\",\n        expects: null,\n        async: false,\n        message,\n        requirement: (input)=>{\n            const sanitized = input.replace(SANITIZE_REGEX, \"\");\n            return PROVIDER_REGEX_LIST.some((regex2)=>regex2.test(sanitized)) && isLuhnAlgo(sanitized);\n        },\n        _parse (input) {\n            if (this.requirement(input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, creditCard, input, \"credit card\");\n        }\n    };\n}\n// src/validations/cuid2/cuid2.ts\nfunction cuid2(message) {\n    return {\n        type: \"cuid2\",\n        expects: null,\n        async: false,\n        message,\n        requirement: CUID2_REGEX,\n        _parse (input) {\n            if (this.requirement.test(input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, cuid2, input, \"Cuid2\");\n        }\n    };\n}\n// src/validations/custom/custom.ts\nfunction custom(requirement, message) {\n    return {\n        type: \"custom\",\n        expects: null,\n        async: false,\n        message,\n        requirement,\n        _parse (input) {\n            if (this.requirement(input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, custom, input, \"input\");\n        }\n    };\n}\n// src/validations/custom/customAsync.ts\nfunction customAsync(requirement, message) {\n    return {\n        type: \"custom\",\n        expects: null,\n        async: true,\n        message,\n        requirement,\n        async _parse (input) {\n            if (await this.requirement(input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, customAsync, input, \"input\");\n        }\n    };\n}\n// src/validations/decimal/decimal.ts\nfunction decimal(message) {\n    return {\n        type: \"decimal\",\n        expects: null,\n        async: false,\n        message,\n        requirement: DECIMAL_REGEX,\n        _parse (input) {\n            if (this.requirement.test(input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, decimal, input, \"decimal\");\n        }\n    };\n}\n// src/validations/email/email.ts\nfunction email(message) {\n    return {\n        type: \"email\",\n        expects: null,\n        async: false,\n        message,\n        requirement: EMAIL_REGEX,\n        _parse (input) {\n            if (this.requirement.test(input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, email, input, \"email\");\n        }\n    };\n}\n// src/validations/emoji/emoji.ts\nfunction emoji(message) {\n    return {\n        type: \"emoji\",\n        expects: null,\n        async: false,\n        message,\n        requirement: EMOJI_REGEX,\n        _parse (input) {\n            if (this.requirement.test(input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, emoji, input, \"emoji\");\n        }\n    };\n}\n// src/validations/endsWith/endsWith.ts\nfunction endsWith(requirement, message) {\n    return {\n        type: \"ends_with\",\n        expects: `\"${requirement}\"`,\n        async: false,\n        message,\n        requirement,\n        _parse (input) {\n            if (input.endsWith(this.requirement)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, endsWith, input, \"end\", `\"${input.slice(-this.requirement.length)}\"`);\n        }\n    };\n}\n// src/validations/every/every.ts\nfunction every(requirement, message) {\n    return {\n        type: \"every\",\n        expects: null,\n        async: false,\n        message,\n        requirement,\n        _parse (input) {\n            if (input.every(this.requirement)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, every, input, \"input\");\n        }\n    };\n}\n// src/validations/excludes/excludes.ts\nfunction excludes(requirement, message) {\n    const received = stringify(requirement);\n    return {\n        type: \"excludes\",\n        expects: `!${received}`,\n        async: false,\n        message,\n        requirement,\n        _parse (input) {\n            if (!input.includes(this.requirement)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, excludes, input, \"content\", received);\n        }\n    };\n}\n// src/validations/finite/finite.ts\nfunction finite(message) {\n    return {\n        type: \"finite\",\n        expects: null,\n        async: false,\n        message,\n        requirement: Number.isFinite,\n        _parse (input) {\n            if (this.requirement(input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, finite, input, \"finite\");\n        }\n    };\n}\n// src/validations/hash/hash.ts\nvar HASH_LENGTHS = {\n    md4: 32,\n    md5: 32,\n    sha1: 40,\n    sha256: 64,\n    sha384: 96,\n    sha512: 128,\n    ripemd128: 32,\n    ripemd160: 40,\n    tiger128: 32,\n    tiger160: 40,\n    tiger192: 48,\n    crc32: 8,\n    crc32b: 8,\n    adler32: 8\n};\nfunction hash(types, message) {\n    return {\n        type: \"hash\",\n        expects: null,\n        async: false,\n        message,\n        requirement: RegExp(types.map((type)=>`^[a-f0-9]{${HASH_LENGTHS[type]}}$`).join(\"|\"), \"iu\"),\n        _parse (input) {\n            if (this.requirement.test(input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, hash, input, \"hash\");\n        }\n    };\n}\n// src/validations/hexadecimal/hexadecimal.ts\nfunction hexadecimal(message) {\n    return {\n        type: \"hexadecimal\",\n        expects: null,\n        async: false,\n        message,\n        requirement: HEXADECIMAL_REGEX,\n        _parse (input) {\n            if (this.requirement.test(input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, hexadecimal, input, \"hexadecimal\");\n        }\n    };\n}\n// src/validations/hexColor/hexColor.ts\nfunction hexColor(message) {\n    return {\n        type: \"hex_color\",\n        expects: null,\n        async: false,\n        message,\n        requirement: HEX_COLOR_REGEX,\n        _parse (input) {\n            if (this.requirement.test(input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, hexColor, input, \"hex color\");\n        }\n    };\n}\n// src/validations/imei/imei.ts\nfunction imei(message) {\n    return {\n        type: \"imei\",\n        expects: null,\n        async: false,\n        message,\n        requirement: [\n            IMEI_REGEX,\n            isLuhnAlgo\n        ],\n        _parse (input) {\n            if (this.requirement[0].test(input) && this.requirement[1](input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, imei, input, \"IMEI\");\n        }\n    };\n}\n// src/validations/includes/includes.ts\nfunction includes(requirement, message) {\n    const expects = stringify(requirement);\n    return {\n        type: \"includes\",\n        expects,\n        async: false,\n        message,\n        requirement,\n        _parse (input) {\n            if (input.includes(this.requirement)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, includes, input, \"content\", `!${expects}`);\n        }\n    };\n}\n// src/validations/integer/integer.ts\nfunction integer(message) {\n    return {\n        type: \"integer\",\n        expects: null,\n        async: false,\n        message,\n        requirement: Number.isInteger,\n        _parse (input) {\n            if (this.requirement(input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, integer, input, \"integer\");\n        }\n    };\n}\n// src/validations/ip/ip.ts\nfunction ip(message) {\n    return {\n        type: \"ip\",\n        expects: null,\n        async: false,\n        message,\n        // TODO: It is strange that we have an OR relationship between requirements\n        requirement: [\n            IPV4_REGEX,\n            IPV6_REGEX\n        ],\n        _parse (input) {\n            if (this.requirement[0].test(input) || this.requirement[1].test(input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, ip, input, \"IP\");\n        }\n    };\n}\n// src/validations/ipv4/ipv4.ts\nfunction ipv4(message) {\n    return {\n        type: \"ipv4\",\n        expects: null,\n        async: false,\n        message,\n        requirement: IPV4_REGEX,\n        _parse (input) {\n            if (this.requirement.test(input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, ipv4, input, \"IPv4\");\n        }\n    };\n}\n// src/validations/ipv6/ipv6.ts\nfunction ipv6(message) {\n    return {\n        type: \"ipv6\",\n        expects: null,\n        async: false,\n        message,\n        requirement: IPV6_REGEX,\n        _parse (input) {\n            if (this.requirement.test(input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, ipv6, input, \"IPv6\");\n        }\n    };\n}\n// src/validations/isoDate/isoDate.ts\nfunction isoDate(message) {\n    return {\n        type: \"iso_date\",\n        expects: null,\n        async: false,\n        message,\n        requirement: ISO_DATE_REGEX,\n        _parse (input) {\n            if (this.requirement.test(input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, isoDate, input, \"date\");\n        }\n    };\n}\n// src/validations/isoDateTime/isoDateTime.ts\nfunction isoDateTime(message) {\n    return {\n        type: \"iso_date_time\",\n        expects: null,\n        async: false,\n        message,\n        requirement: ISO_DATE_TIME_REGEX,\n        _parse (input) {\n            if (this.requirement.test(input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, isoDateTime, input, \"date-time\");\n        }\n    };\n}\n// src/validations/isoTime/isoTime.ts\nfunction isoTime(message) {\n    return {\n        type: \"iso_time\",\n        expects: null,\n        async: false,\n        message,\n        requirement: ISO_TIME_REGEX,\n        _parse (input) {\n            if (this.requirement.test(input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, isoTime, input, \"time\");\n        }\n    };\n}\n// src/validations/isoTimeSecond/isoTimeSecond.ts\nfunction isoTimeSecond(message) {\n    return {\n        type: \"iso_time_second\",\n        expects: null,\n        async: false,\n        message,\n        requirement: ISO_TIME_SECOND_REGEX,\n        _parse (input) {\n            if (this.requirement.test(input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, isoTimeSecond, input, \"time second\");\n        }\n    };\n}\n// src/validations/isoTimestamp/isoTimestamp.ts\nfunction isoTimestamp(message) {\n    return {\n        type: \"iso_timestamp\",\n        expects: null,\n        async: false,\n        message,\n        requirement: ISO_TIMESTAMP_REGEX,\n        _parse (input) {\n            if (this.requirement.test(input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, isoTimestamp, input, \"timestamp\");\n        }\n    };\n}\n// src/validations/isoWeek/isoWeek.ts\nfunction isoWeek(message) {\n    return {\n        type: \"iso_week\",\n        expects: null,\n        async: false,\n        message,\n        requirement: ISO_WEEK_REGEX,\n        _parse (input) {\n            if (this.requirement.test(input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, isoWeek, input, \"week\");\n        }\n    };\n}\n// src/validations/length/length.ts\nfunction length(requirement, message) {\n    return {\n        type: \"length\",\n        expects: `${requirement}`,\n        async: false,\n        message,\n        requirement,\n        _parse (input) {\n            if (input.length === this.requirement) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, length, input, \"length\", `${input.length}`);\n        }\n    };\n}\n// src/validations/mac/mac.ts\nfunction mac(message) {\n    return {\n        type: \"mac\",\n        expects: null,\n        async: false,\n        message,\n        // TODO: It is strange that we have an OR relationship between requirements\n        requirement: [\n            MAC48_REGEX,\n            MAC64_REGEX\n        ],\n        _parse (input) {\n            if (this.requirement[0].test(input) || this.requirement[1].test(input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, mac, input, \"MAC\");\n        }\n    };\n}\n// src/validations/mac48/mac48.ts\nfunction mac48(message) {\n    return {\n        type: \"mac48\",\n        expects: null,\n        async: false,\n        message,\n        requirement: MAC48_REGEX,\n        _parse (input) {\n            if (this.requirement.test(input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, mac48, input, \"48-bit MAC\");\n        }\n    };\n}\n// src/validations/mac64/mac64.ts\nfunction mac64(message) {\n    return {\n        type: \"mac64\",\n        expects: null,\n        async: false,\n        message,\n        requirement: MAC64_REGEX,\n        _parse (input) {\n            if (this.requirement.test(input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, mac64, input, \"64-bit MAC\");\n        }\n    };\n}\n// src/validations/maxBytes/maxBytes.ts\nfunction maxBytes(requirement, message) {\n    return {\n        type: \"max_bytes\",\n        expects: `<=${requirement}`,\n        async: false,\n        message,\n        requirement,\n        _parse (input) {\n            const length2 = new TextEncoder().encode(input).length;\n            if (length2 <= this.requirement) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, maxBytes, input, \"bytes\", `${length2}`);\n        }\n    };\n}\n// src/validations/maxLength/maxLength.ts\nfunction maxLength(requirement, message) {\n    return {\n        type: \"max_length\",\n        expects: `<=${requirement}`,\n        async: false,\n        message,\n        requirement,\n        _parse (input) {\n            if (input.length <= this.requirement) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, maxLength, input, \"length\", `${input.length}`);\n        }\n    };\n}\n// src/validations/maxSize/maxSize.ts\nfunction maxSize(requirement, message) {\n    return {\n        type: \"max_size\",\n        expects: `<=${requirement}`,\n        async: false,\n        message,\n        requirement,\n        _parse (input) {\n            if (input.size <= this.requirement) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, maxSize, input, \"size\", `${input.size}`);\n        }\n    };\n}\n// src/validations/maxValue/maxValue.ts\nfunction maxValue(requirement, message) {\n    return {\n        type: \"max_value\",\n        expects: `<=${requirement instanceof Date ? requirement.toJSON() : stringify(requirement)}`,\n        async: false,\n        message,\n        requirement,\n        _parse (input) {\n            if (input <= this.requirement) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, maxValue, input, \"value\", input instanceof Date ? input.toJSON() : stringify(input));\n        }\n    };\n}\n// src/validations/minBytes/minBytes.ts\nfunction minBytes(requirement, message) {\n    return {\n        type: \"min_bytes\",\n        expects: `>=${requirement}`,\n        async: false,\n        message,\n        requirement,\n        _parse (input) {\n            const length2 = new TextEncoder().encode(input).length;\n            if (length2 >= this.requirement) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, minBytes, input, \"bytes\", `${length2}`);\n        }\n    };\n}\n// src/validations/mimeType/mimeType.ts\nfunction mimeType(requirement, message) {\n    return {\n        type: \"mime_type\",\n        expects: requirement.map((option)=>`\"${option}\"`).join(\" | \"),\n        async: false,\n        message,\n        requirement,\n        _parse (input) {\n            if (this.requirement.includes(input.type)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, mimeType, input, \"MIME type\");\n        }\n    };\n}\n// src/validations/minLength/minLength.ts\nfunction minLength(requirement, message) {\n    return {\n        type: \"min_length\",\n        expects: `>=${requirement}`,\n        async: false,\n        message,\n        requirement,\n        _parse (input) {\n            if (input.length >= this.requirement) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, minLength, input, \"length\", `${input.length}`);\n        }\n    };\n}\n// src/validations/minSize/minSize.ts\nfunction minSize(requirement, message) {\n    return {\n        type: \"min_size\",\n        expects: `>=${requirement}`,\n        async: false,\n        message,\n        requirement,\n        _parse (input) {\n            if (input.size >= this.requirement) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, minSize, input, \"size\", `${input.size}`);\n        }\n    };\n}\n// src/validations/minValue/minValue.ts\nfunction minValue(requirement, message) {\n    return {\n        type: \"min_value\",\n        expects: `>=${requirement instanceof Date ? requirement.toJSON() : stringify(requirement)}`,\n        async: false,\n        message,\n        requirement,\n        _parse (input) {\n            if (input >= this.requirement) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, minValue, input, \"value\", input instanceof Date ? input.toJSON() : stringify(input));\n        }\n    };\n}\n// src/validations/multipleOf/multipleOf.ts\nfunction multipleOf(requirement, message) {\n    return {\n        type: \"multiple_of\",\n        expects: `%${requirement}`,\n        async: false,\n        message,\n        requirement,\n        _parse (input) {\n            if (input % this.requirement === 0) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, multipleOf, input, \"multiple\", `${input}`);\n        }\n    };\n}\n// src/validations/notBytes/notBytes.ts\nfunction notBytes(requirement, message) {\n    return {\n        type: \"not_bytes\",\n        expects: `!${requirement}`,\n        async: false,\n        message,\n        requirement,\n        _parse (input) {\n            const length2 = new TextEncoder().encode(input).length;\n            if (length2 !== this.requirement) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, notBytes, input, \"bytes\", `${length2}`);\n        }\n    };\n}\n// src/validations/notLength/notLength.ts\nfunction notLength(requirement, message) {\n    return {\n        type: \"not_length\",\n        expects: `!${requirement}`,\n        async: false,\n        message,\n        requirement,\n        _parse (input) {\n            if (input.length !== this.requirement) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, notLength, input, \"length\", `${input.length}`);\n        }\n    };\n}\n// src/validations/notSize/notSize.ts\nfunction notSize(requirement, message) {\n    return {\n        type: \"not_size\",\n        expects: `!${requirement}`,\n        async: false,\n        message,\n        requirement,\n        _parse (input) {\n            if (input.size !== this.requirement) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, notSize, input, \"size\", `${input.size}`);\n        }\n    };\n}\n// src/validations/notValue/notValue.ts\nfunction notValue(requirement, message) {\n    return {\n        type: \"not_value\",\n        expects: `!${requirement instanceof Date ? requirement.toJSON() : stringify(requirement)}`,\n        async: false,\n        message,\n        requirement,\n        _parse (input) {\n            if (input < this.requirement || input > this.requirement) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, notValue, input, \"value\", input instanceof Date ? input.toJSON() : stringify(input));\n        }\n    };\n}\n// src/validations/octal/octal.ts\nfunction octal(message) {\n    return {\n        type: \"octal\",\n        expects: null,\n        async: false,\n        message,\n        requirement: OCTAL_REGEX,\n        _parse (input) {\n            if (this.requirement.test(input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, octal, input, \"octal\");\n        }\n    };\n}\n// src/validations/regex/regex.ts\nfunction regex(requirement, message) {\n    return {\n        type: \"regex\",\n        expects: `${requirement}`,\n        async: false,\n        message,\n        requirement,\n        _parse (input) {\n            if (this.requirement.test(input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, regex, input, \"format\");\n        }\n    };\n}\n// src/validations/safeInteger/safeInteger.ts\nfunction safeInteger(message) {\n    return {\n        type: \"safe_integer\",\n        expects: null,\n        async: false,\n        message,\n        requirement: Number.isSafeInteger,\n        _parse (input) {\n            if (this.requirement(input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, safeInteger, input, \"safe integer\");\n        }\n    };\n}\n// src/validations/size/size.ts\nfunction size(requirement, message) {\n    return {\n        type: \"size\",\n        expects: `${requirement}`,\n        async: false,\n        message,\n        requirement,\n        _parse (input) {\n            if (input.size === this.requirement) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, size, input, \"size\", `${input.size}`);\n        }\n    };\n}\n// src/validations/some/some.ts\nfunction some(requirement, message) {\n    return {\n        type: \"some\",\n        expects: null,\n        async: false,\n        message,\n        requirement,\n        _parse (input) {\n            if (input.some(this.requirement)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, some, input, \"input\");\n        }\n    };\n}\n// src/validations/startsWith/startsWith.ts\nfunction startsWith(requirement, message) {\n    return {\n        type: \"starts_with\",\n        expects: `\"${requirement}\"`,\n        async: false,\n        message,\n        requirement,\n        _parse (input) {\n            if (input.startsWith(this.requirement)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, startsWith, input, \"start\", `\"${input.slice(0, this.requirement.length)}\"`);\n        }\n    };\n}\n// src/validations/ulid/ulid.ts\nfunction ulid(message) {\n    return {\n        type: \"ulid\",\n        expects: null,\n        async: false,\n        message,\n        requirement: ULID_REGEX,\n        _parse (input) {\n            if (this.requirement.test(input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, ulid, input, \"ULID\");\n        }\n    };\n}\n// src/validations/url/url.ts\nfunction url(message) {\n    return {\n        type: \"url\",\n        expects: null,\n        async: false,\n        message,\n        requirement (input) {\n            try {\n                new URL(input);\n                return true;\n            } catch  {\n                return false;\n            }\n        },\n        _parse (input) {\n            if (this.requirement(input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, url, input, \"URL\");\n        }\n    };\n}\n// src/validations/uuid/uuid.ts\nfunction uuid(message) {\n    return {\n        type: \"uuid\",\n        expects: null,\n        async: false,\n        message,\n        requirement: UUID_REGEX,\n        _parse (input) {\n            if (this.requirement.test(input)) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, uuid, input, \"UUID\");\n        }\n    };\n}\n// src/validations/value/value.ts\nfunction value(requirement, message) {\n    return {\n        type: \"value\",\n        expects: `${requirement instanceof Date ? requirement.toJSON() : stringify(requirement)}`,\n        async: false,\n        message,\n        requirement,\n        _parse (input) {\n            if (input <= this.requirement && input >= this.requirement) {\n                return actionOutput(input);\n            }\n            return actionIssue(this, value, input, \"value\", input instanceof Date ? input.toJSON() : stringify(input));\n        }\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/valibot/dist/index.js\n");

/***/ })

};
;